buildscript {
    repositories {
        mavenCentral()
        maven {
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = mod_version + "-" + new Date().format("dd-MM-yyyy")
// http://maven.apache.org/guides/mini/guide-naming-conventions.html
group = mod_group_id
archivesBaseName = mod_name_no_spaces

// Mojang ships Java 8 to end users in versions prior to 1.17, so your mod should target Java 8.
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#                            Stables are built at the discretion of the MCP team.

    // Use non-default mappings at your own risk, they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // An Srg-named sources jar is made by default. Uncomment this to disable.
    // makeObfSourceJar = false

    // This property enables access transformers for use in development, which will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project. However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // Applies to all run configurations below.
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a user development environment.
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console.
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Disables the reference map for mixins.
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Copied from Tinker's Construct repository.
            if (project.hasProperty('mc_uuid')) {
                // Your uuid without any dashes in the middle.
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your username/display name, this is the name that shows up in chat.
                // Note: This is not your email, even if you have a Mojang account.
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                // Your access token, you can find it in your '.minecraft/launcher_profiles.json' file.
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            args '--version', 'melony-studios-dev/back-math'

            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property "mixin.debug.export", "true"
        }

        server {
            args '--nogui'
        }

        data {
            // Specify the mod id for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all','--existing', file('src/main/resources').toString(),'--existing', file('src/generated/resources').toString(), '--output', file('src/generated/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "backmath.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    // Specify the Minecraft version to use.
    // If this is any group other than 'net.minecraft', it is assumed that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The user development artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Compile against the Just Enough Items API but do not include it at runtime.
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // At runtime, use the full Just Enough Items jar.
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // Annotation Processors
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'

    // Female Gender Mod
    compile fg.deobf("curse.maven:female-gender-456319:3306541")

    // Mantle
    // compile fg.deobf("curse.maven:mantle-74924:3180804")

    // Cucumber
    // compile fg.deobf("curse.maven:cucumber-272335:3105891")

    // Mystical Agriculture
    // compile fg.deobf("curse.maven:mystical-agriculture-246640:3152061")
}

repositories {
    maven {
        // Just Enough Items
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        // Location of a maven mirror for Just Enough Items files, as a fallback.
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Curse Maven
        url "https://www.cursemaven.com"
    }
}

// Example for how to get properties into the manifest for reading by the runtime:
jar {
    manifest {
        attributes([
                'Specification-Title': mod_name,
                'Specification-Vendor': mod_authors,
                // We are version 1 of ourselves.
                'Specification-Version': '1',
                'Implementation-Title': project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor': mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'backmath.mixins.json'
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task.
// This is the preferred method to reobfuscate your jar file.
jar.finalizedBy('reobfJar')

// However if you are in a multi-project build, development time needs unobfuscated jar files, so you can delay the obfuscation until publishing by doing
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
