plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = mod_version + "-" +  mod_major_update
// http://maven.apache.org/guides/mini/guide-naming-conventions.html
group = mod_group_id
base {
    archivesName = mod_name_no_spaces
}

// Mojang ships Java 8 to end users in versions prior to 1.17, so your mod should target Java 8.
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#                            Stables are built at the discretion of the MCP team.

    // Use non-default mappings at your own risk, they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version
    // An Srg-named sources jar is made by default. Uncomment this to disable.
    // makeObfSourceJar = false

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // This property enables access transformers for use in development, which will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project. However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // Applies to all run configurations below.
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a user development environment.
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console.
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {}

        server {
            args '--nogui'
        }

        data {
            // Specify the mod id for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all','--existing', file('src/main/resources').toString(),'--existing', file('src/generated/resources').toString(), '--output', file('src/generated/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    // Specify the Minecraft version to use.
    // If this is any group other than 'net.minecraft', it is assumed that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The user development artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Compile against the Just Enough Items API but do not include it at runtime.
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // At runtime, use the full Just Enough Items jar.
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // Apply Mixin AP
    // annotationProcessor 'org.spongepowered:mixin:0.8.0:processor'

    // compileOnly fg.deobf("org.spongepowered:mixingradle:0.7-SNAPSHOT")
    // runtimeOnly fg.deobf("org.spongepowered:mixingradle:0.7-SNAPSHOT")

    // Mantle
    // compile fg.deobf("curse.maven:mantle-74924:3180804")

    // Cucumber
    // compile fg.deobf("curse.maven:cucumber-272335:3105891")

    // Mystical Agriculture
    // compile fg.deobf("curse.maven:mystical-agriculture-246640:3152061")
}

repositories {
    maven {
        // Just Enough Items
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        // Location of a maven mirror for Just Enough Items files, as a fallback.
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Curse Maven
        url "https://www.cursemaven.com"
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
//tasks.named('processResources', ProcessResources).configure {
//    var replaceProperties = [
//            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
//            forge_version: forge_version, forge_version_range: forge_version_range,
//            loader_version_range: loader_version_range,
//            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
//            mod_authors: mod_authors, mod_description: mod_description, mod_major_update: mod_major_update,
//    ]
//    inputs.properties replaceProperties
//
//    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
//        expand replaceProperties + [project: project]
//    }
//}

// Example for how to get properties into the manifest for reading by the runtime:
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title': mod_name,
            'Specification-Vendor': mod_authors,
            // We are version one of ourselves.
            'Specification-Version': '1',
            'Implementation-Title': project.name,
            'Implementation-Version': project.jar.archiveVersion,
            'Implementation-Vendor' : mod_authors,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // Example configuration to allow publishing using the maven-publish task.
    // This is the preferred method to reobfuscate your jar file.
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, development time needs unobfuscated jar files, so you can delay the obfuscation until publishing by doing
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    // Use the UTF-8 charset for Java compilation.
    options.encoding = 'UTF-8'
}