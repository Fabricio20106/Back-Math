package com.sophicreeper.backmath.core.world.item;

import com.sophicreeper.backmath.core.client.BackMath;
import com.sophicreeper.backmath.core.world.item.armor.*;
import com.sophicreeper.backmath.core.world.item.food.*;
import com.sophicreeper.backmath.core.world.item.food.jam.GlisteringJamItem;
import com.sophicreeper.backmath.core.world.item.food.jam.JamItem;
import com.sophicreeper.backmath.core.world.item.food.jam.MangaedMangoJamItem;
import com.sophicreeper.backmath.core.world.item.food.drink.*;
import com.sophicreeper.backmath.core.world.item.food.popsicle.EnchantedGoldenApplePopsicleItem;
import com.sophicreeper.backmath.core.world.item.food.popsicle.GoldenApplePopsicleItem;
import com.sophicreeper.backmath.core.world.item.food.popsicle.MangaedMangoPopsicleItem;
import com.sophicreeper.backmath.core.world.item.food.popsicle.PopsicleItem;
import com.sophicreeper.backmath.core.world.item.teas.DisgustTeaItem;
import com.sophicreeper.backmath.core.world.item.teas.MoodTeaItem;
import com.sophicreeper.backmath.core.world.item.teas.PatienceTeaItem;
import com.sophicreeper.backmath.core.world.item.teas.PeaceTeaItem;
import com.sophicreeper.backmath.core.world.item.tool.*;
import com.sophicreeper.backmath.core.world.item.tool.midterm.*;
import com.sophicreeper.backmath.core.world.item.weapon.*;
import com.sophicreeper.backmath.core.world.item.weapon.milked.*;
import com.sophicreeper.backmath.core.world.item.weapon.misc.*;
import com.sophicreeper.backmath.core.world.item.weapon.sparey.*;
import com.sophicreeper.backmath.core.world.level.block.BMBlocks;
import com.sophicreeper.backmath.core.world.entity.BMEntities;
import com.sophicreeper.backmath.core.world.level.material.BMFluids;
import com.sophicreeper.backmath.core.sounds.BMSounds;
import net.minecraft.inventory.EquipmentSlotType;
import net.minecraft.item.*;
import net.minecraft.potion.EffectInstance;
import net.minecraft.potion.Effects;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;

import static com.sophicreeper.backmath.core.util.BMSetFields.*;

public class AxolotlTest {
    public static final DeferredRegister<Item> ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, BackMath.MOD_ID);

    // Back Math Creative Tabs Reorder: Blocks Tab
    // Crystalline Birch Wood:
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_LOG = ITEMS.register("crystalline_birch_log", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_WOOD = ITEMS.register("crystalline_birch_wood", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_CRYSTALLINE_BIRCH_LOG = ITEMS.register("stripped_crystalline_birch_log", () -> new BlockItem(BMBlocks.STRIPPED_CRYSTALLINE_BIRCH_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_CRYSTALLINE_BIRCH_WOOD = ITEMS.register("stripped_crystalline_birch_wood", () -> new BlockItem(BMBlocks.STRIPPED_CRYSTALLINE_BIRCH_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_LEAVES = ITEMS.register("crystalline_birch_leaves", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_SAPLING = ITEMS.register("crystalline_birch_sapling", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_PLANKS = ITEMS.register("crystalline_birch_planks", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_PLANKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_STAIRS = ITEMS.register("crystalline_birch_stairs", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_SLAB = ITEMS.register("crystalline_birch_slab", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_FENCE = ITEMS.register("crystalline_birch_fence", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_FENCE_GATE = ITEMS.register("crystalline_birch_fence_gate", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_GRAPE_VINE_POST = ITEMS.register("crystalline_birch_grape_vine_post", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_DOOR = ITEMS.register("crystalline_birch_door", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_DOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_TRAPDOOR = ITEMS.register("crystalline_birch_trapdoor", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_PRESSURE_PLATE = ITEMS.register("crystalline_birch_pressure_plate", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_BUTTON = ITEMS.register("crystalline_birch_button", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_LADDER = ITEMS.register("crystalline_birch_ladder", () -> new BlockItem(BMBlocks.CRYSTALLINE_BIRCH_LADDER.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Goldenwood Wood:
    public static final RegistryObject<Item> GOLDENWOOD_LOG = ITEMS.register("goldenwood_log", () -> new BlockItem(BMBlocks.GOLDENWOOD_LOG.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_WOOD = ITEMS.register("goldenwood_wood", () -> new BlockItem(BMBlocks.GOLDENWOOD_WOOD.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_GOLDENWOOD_LOG = ITEMS.register("stripped_goldenwood_log", () -> new BlockItem(BMBlocks.STRIPPED_GOLDENWOOD_LOG.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_GOLDENWOOD_WOOD = ITEMS.register("stripped_goldenwood_wood", () -> new BlockItem(BMBlocks.STRIPPED_GOLDENWOOD_WOOD.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_LEAVES = ITEMS.register("goldenwood_leaves", () -> new BlockItem(BMBlocks.GOLDENWOOD_LEAVES.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ENCHANTED_GOLDENWOOD_LEAVES = ITEMS.register("enchanted_goldenwood_leaves", () -> new GlisteringBlockItem(BMBlocks.ENCHANTED_GOLDENWOOD_LEAVES.get(), new Item.Properties().rarity(Rarity.EPIC).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_SAPLING = ITEMS.register("goldenwood_sapling", () -> new BlockItem(BMBlocks.GOLDENWOOD_SAPLING.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ENCHANTED_GOLDENWOOD_SAPLING = ITEMS.register("enchanted_goldenwood_sapling", () -> new GlisteringBlockItem(BMBlocks.ENCHANTED_GOLDENWOOD_SAPLING.get(), new Item.Properties().rarity(Rarity.EPIC).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_PLANKS = ITEMS.register("goldenwood_planks", () -> new BlockItem(BMBlocks.GOLDENWOOD_PLANKS.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_STAIRS = ITEMS.register("goldenwood_stairs", () -> new BlockItem(BMBlocks.GOLDENWOOD_STAIRS.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_SLAB = ITEMS.register("goldenwood_slab", () -> new BlockItem(BMBlocks.GOLDENWOOD_SLAB.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_FENCE = ITEMS.register("goldenwood_fence", () -> new BlockItem(BMBlocks.GOLDENWOOD_FENCE.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_FENCE_GATE = ITEMS.register("goldenwood_fence_gate", () -> new BlockItem(BMBlocks.GOLDENWOOD_FENCE_GATE.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_GRAPE_VINE_POST = ITEMS.register("goldenwood_grape_vine_post", () -> new BlockItem(BMBlocks.GOLDENWOOD_GRAPE_VINE_POST.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_DOOR = ITEMS.register("goldenwood_door", () -> new BlockItem(BMBlocks.GOLDENWOOD_DOOR.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_TRAPDOOR = ITEMS.register("goldenwood_trapdoor", () -> new BlockItem(BMBlocks.GOLDENWOOD_TRAPDOOR.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_PRESSURE_PLATE = ITEMS.register("goldenwood_pressure_plate", () -> new BlockItem(BMBlocks.GOLDENWOOD_PRESSURE_PLATE.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_BUTTON = ITEMS.register("goldenwood_button", () -> new BlockItem(BMBlocks.GOLDENWOOD_BUTTON.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_LADDER = ITEMS.register("goldenwood_ladder", () -> new BlockItem(BMBlocks.GOLDENWOOD_LADDER.get(), new Item.Properties().rarity(Rarity.RARE).group(BMBlockTab.TAB)));

    // Guava Wood:
    public static final RegistryObject<Item> GUAVA_LOG = ITEMS.register("guava_log", () -> new BlockItem(BMBlocks.GUAVA_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_WOOD = ITEMS.register("guava_wood", () -> new BlockItem(BMBlocks.GUAVA_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_GUAVA_LOG = ITEMS.register("stripped_guava_log", () -> new BlockItem(BMBlocks.STRIPPED_GUAVA_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_GUAVA_WOOD = ITEMS.register("stripped_guava_wood", () -> new BlockItem(BMBlocks.STRIPPED_GUAVA_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_LEAVES = ITEMS.register("guava_leaves", () -> new BlockItem(BMBlocks.GUAVA_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_SAPLING = ITEMS.register("guava_sapling", () -> new BlockItem(BMBlocks.GUAVA_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_PLANKS = ITEMS.register("guava_planks", () -> new BlockItem(BMBlocks.GUAVA_PLANKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_STAIRS = ITEMS.register("guava_stairs", () -> new BlockItem(BMBlocks.GUAVA_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_SLAB = ITEMS.register("guava_slab", () -> new BlockItem(BMBlocks.GUAVA_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_FENCE = ITEMS.register("guava_fence", () -> new BlockItem(BMBlocks.GUAVA_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_FENCE_GATE = ITEMS.register("guava_fence_gate", () -> new BlockItem(BMBlocks.GUAVA_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_GRAPE_VINE_POST = ITEMS.register("guava_grape_vine_post", () -> new BlockItem(BMBlocks.GUAVA_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_DOOR = ITEMS.register("guava_door", () -> new BlockItem(BMBlocks.GUAVA_DOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_TRAPDOOR = ITEMS.register("guava_trapdoor", () -> new BlockItem(BMBlocks.GUAVA_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_PRESSURE_PLATE = ITEMS.register("guava_pressure_plate", () -> new BlockItem(BMBlocks.GUAVA_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_BUTTON = ITEMS.register("guava_button", () -> new BlockItem(BMBlocks.GUAVA_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUAVA_LADDER = ITEMS.register("guava_ladder", () -> new BlockItem(BMBlocks.GUAVA_LADDER.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Jabuticaba Wood:
    public static final RegistryObject<Item> JABUTICABA_LOG = ITEMS.register("jabuticaba_log", () -> new BlockItem(BMBlocks.JABUTICABA_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_WOOD = ITEMS.register("jabuticaba_wood", () -> new BlockItem(BMBlocks.JABUTICABA_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_JABUTICABA_LOG = ITEMS.register("stripped_jabuticaba_log", () -> new BlockItem(BMBlocks.STRIPPED_JABUTICABA_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_JABUTICABA_WOOD = ITEMS.register("stripped_jabuticaba_wood", () -> new BlockItem(BMBlocks.STRIPPED_JABUTICABA_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_LEAVES = ITEMS.register("jabuticaba_leaves", () -> new BlockItem(BMBlocks.JABUTICABA_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_SAPLING = ITEMS.register("jabuticaba_sapling", () -> new BlockItem(BMBlocks.JABUTICABA_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_PLANKS = ITEMS.register("jabuticaba_planks", () -> new BlockItem(BMBlocks.JABUTICABA_PLANKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_STAIRS = ITEMS.register("jabuticaba_stairs", () -> new BlockItem(BMBlocks.JABUTICABA_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_SLAB = ITEMS.register("jabuticaba_slab", () -> new BlockItem(BMBlocks.JABUTICABA_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_FENCE = ITEMS.register("jabuticaba_fence", () -> new BlockItem(BMBlocks.JABUTICABA_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_FENCE_GATE = ITEMS.register("jabuticaba_fence_gate", () -> new BlockItem(BMBlocks.JABUTICABA_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_GRAPE_VINE_POST = ITEMS.register("jabuticaba_grape_vine_post", () -> new BlockItem(BMBlocks.JABUTICABA_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_DOOR = ITEMS.register("jabuticaba_door", () -> new BlockItem(BMBlocks.JABUTICABA_DOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_TRAPDOOR = ITEMS.register("jabuticaba_trapdoor", () -> new BlockItem(BMBlocks.JABUTICABA_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_PRESSURE_PLATE = ITEMS.register("jabuticaba_pressure_plate", () -> new BlockItem(BMBlocks.JABUTICABA_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_BUTTON = ITEMS.register("jabuticaba_button", () -> new BlockItem(BMBlocks.JABUTICABA_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_LADDER = ITEMS.register("jabuticaba_ladder", () -> new BlockItem(BMBlocks.JABUTICABA_LADDER.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Cork Oak Wood:
    public static final RegistryObject<Item> CORK_OAK_LOG = ITEMS.register("cork_oak_log", () -> new BlockItem(BMBlocks.CORK_OAK_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_WOOD = ITEMS.register("cork_oak_wood", () -> new BlockItem(BMBlocks.CORK_OAK_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_CORK_OAK_LOG = ITEMS.register("stripped_cork_oak_log", () -> new BlockItem(BMBlocks.STRIPPED_CORK_OAK_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_CORK_OAK_WOOD = ITEMS.register("stripped_cork_oak_wood", () -> new BlockItem(BMBlocks.STRIPPED_CORK_OAK_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_LEAVES = ITEMS.register("cork_oak_leaves", () -> new BlockItem(BMBlocks.CORK_OAK_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    // public static final RegistryObject<Item> CORK_OAK_SAPLING = ITEMS.register("cork_oak_sapling", () -> new BlockItem(BMBlocks.CORK_OAK_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_PLANKS = ITEMS.register("cork_oak_planks", () -> new BlockItem(BMBlocks.CORK_OAK_PLANKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_STAIRS = ITEMS.register("cork_oak_stairs", () -> new BlockItem(BMBlocks.CORK_OAK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_SLAB = ITEMS.register("cork_oak_slab", () -> new BlockItem(BMBlocks.CORK_OAK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_FENCE = ITEMS.register("cork_oak_fence", () -> new BlockItem(BMBlocks.CORK_OAK_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_FENCE_GATE = ITEMS.register("cork_oak_fence_gate", () -> new BlockItem(BMBlocks.CORK_OAK_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_GRAPE_VINE_POST = ITEMS.register("cork_oak_grape_vine_post", () -> new BlockItem(BMBlocks.CORK_OAK_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_DOOR = ITEMS.register("cork_oak_door", () -> new BlockItem(BMBlocks.CORK_OAK_DOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_TRAPDOOR = ITEMS.register("cork_oak_trapdoor", () -> new BlockItem(BMBlocks.CORK_OAK_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_PRESSURE_PLATE = ITEMS.register("cork_oak_pressure_plate", () -> new BlockItem(BMBlocks.CORK_OAK_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_BUTTON = ITEMS.register("cork_oak_button", () -> new BlockItem(BMBlocks.CORK_OAK_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_LADDER = ITEMS.register("cork_oak_ladder", () -> new BlockItem(BMBlocks.CORK_OAK_LADDER.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Aljanwood Wood:
    public static final RegistryObject<Item> ALJANWOOD_LOG = ITEMS.register("aljanwood_log", () -> new BlockItem(BMBlocks.ALJANWOOD_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_WOOD = ITEMS.register("aljanwood_wood", () -> new BlockItem(BMBlocks.ALJANWOOD_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_ALJANWOOD_LOG = ITEMS.register("stripped_aljanwood_log", () -> new BlockItem(BMBlocks.STRIPPED_ALJANWOOD_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_ALJANWOOD_WOOD = ITEMS.register("stripped_aljanwood_wood", () -> new BlockItem(BMBlocks.STRIPPED_ALJANWOOD_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_LEAVES = ITEMS.register("aljanwood_leaves", () -> new BlockItem(BMBlocks.ALJANWOOD_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_SAPLING = ITEMS.register("aljanwood_sapling", () -> new BlockItem(BMBlocks.ALJANWOOD_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_PLANKS = ITEMS.register("aljanwood_planks", () -> new BlockItem(BMBlocks.ALJANWOOD_PLANKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_STAIRS = ITEMS.register("aljanwood_stairs", () -> new BlockItem(BMBlocks.ALJANWOOD_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_SLAB = ITEMS.register("aljanwood_slab", () -> new BlockItem(BMBlocks.ALJANWOOD_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_FENCE = ITEMS.register("aljanwood_fence", () -> new BlockItem(BMBlocks.ALJANWOOD_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_FENCE_GATE = ITEMS.register("aljanwood_fence_gate", () -> new BlockItem(BMBlocks.ALJANWOOD_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_GRAPE_VINE_POST = ITEMS.register("aljanwood_grape_vine_post", () -> new BlockItem(BMBlocks.ALJANWOOD_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_DOOR = ITEMS.register("aljanwood_door", () -> new BlockItem(BMBlocks.ALJANWOOD_DOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_TRAPDOOR = ITEMS.register("aljanwood_trapdoor", () -> new BlockItem(BMBlocks.ALJANWOOD_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_PRESSURE_PLATE = ITEMS.register("aljanwood_pressure_plate", () -> new BlockItem(BMBlocks.ALJANWOOD_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_BUTTON = ITEMS.register("aljanwood_button", () -> new BlockItem(BMBlocks.ALJANWOOD_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_LADDER = ITEMS.register("aljanwood_ladder", () -> new BlockItem(BMBlocks.ALJANWOOD_LADDER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHARJAN_ALJANWOOD_TORCH = ITEMS.register("charjan_aljanwood_torch", () -> new WallOrFloorItem(BMBlocks.CHARJAN_ALJANWOOD_TORCH.get(), BMBlocks.CHARJAN_ALJANWOOD_WALL_TORCH.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Aljancap Wood:
    public static final RegistryObject<Item> ALJANCAP_LOG = ITEMS.register("aljancap_log", () -> new BlockItem(BMBlocks.ALJANCAP_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_WOOD = ITEMS.register("aljancap_wood", () -> new BlockItem(BMBlocks.ALJANCAP_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_ALJANCAP_LOG = ITEMS.register("stripped_aljancap_log", () -> new BlockItem(BMBlocks.STRIPPED_ALJANCAP_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_ALJANCAP_WOOD = ITEMS.register("stripped_aljancap_wood", () -> new BlockItem(BMBlocks.STRIPPED_ALJANCAP_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_LEAVES = ITEMS.register("aljancap_leaves", () -> new BlockItem(BMBlocks.ALJANCAP_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AMARACAP_LEAVES = ITEMS.register("amaracap_leaves", () -> new BlockItem(BMBlocks.AMARACAP_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_SAPLING = ITEMS.register("aljancap_sapling", () -> new BlockItem(BMBlocks.ALJANCAP_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_PLANKS = ITEMS.register("aljancap_planks", () -> new BlockItem(BMBlocks.ALJANCAP_PLANKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_STAIRS = ITEMS.register("aljancap_stairs", () -> new BlockItem(BMBlocks.ALJANCAP_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_SLAB = ITEMS.register("aljancap_slab", () -> new BlockItem(BMBlocks.ALJANCAP_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_FENCE = ITEMS.register("aljancap_fence", () -> new BlockItem(BMBlocks.ALJANCAP_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_FENCE_GATE = ITEMS.register("aljancap_fence_gate", () -> new BlockItem(BMBlocks.ALJANCAP_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_GRAPE_VINE_POST = ITEMS.register("aljancap_grape_vine_post", () -> new BlockItem(BMBlocks.ALJANCAP_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_PRESSURE_PLATE = ITEMS.register("aljancap_pressure_plate", () -> new BlockItem(BMBlocks.ALJANCAP_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_BUTTON = ITEMS.register("aljancap_button", () -> new BlockItem(BMBlocks.ALJANCAP_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_LADDER = ITEMS.register("aljancap_ladder", () -> new BlockItem(BMBlocks.ALJANCAP_LADDER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHARJAN_ALJANCAP_TORCH = ITEMS.register("charjan_aljancap_torch", () -> new WallOrFloorItem(BMBlocks.CHARJAN_ALJANCAP_TORCH.get(), BMBlocks.CHARJAN_ALJANCAP_WALL_TORCH.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Insomnian Wood:
    public static final RegistryObject<Item> INSOMNIAN_LOG = ITEMS.register("insomnian_log", () -> new BlockItem(BMBlocks.INSOMNIAN_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_WOOD = ITEMS.register("insomnian_wood", () -> new BlockItem(BMBlocks.INSOMNIAN_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_INSOMNIAN_LOG = ITEMS.register("stripped_insomnian_log", () -> new BlockItem(BMBlocks.STRIPPED_INSOMNIAN_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_INSOMNIAN_WOOD = ITEMS.register("stripped_insomnian_wood", () -> new BlockItem(BMBlocks.STRIPPED_INSOMNIAN_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_LEAVES = ITEMS.register("insomnian_leaves", () -> new BlockItem(BMBlocks.INSOMNIAN_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_SAPLING = ITEMS.register("insomnian_sapling", () -> new BlockItem(BMBlocks.INSOMNIAN_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_PLANKS = ITEMS.register("insomnian_planks", () -> new BlockItem(BMBlocks.INSOMNIAN_PLANKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_STAIRS = ITEMS.register("insomnian_stairs", () -> new BlockItem(BMBlocks.INSOMNIAN_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_SLAB = ITEMS.register("insomnian_slab", () -> new BlockItem(BMBlocks.INSOMNIAN_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_FENCE = ITEMS.register("insomnian_fence", () -> new BlockItem(BMBlocks.INSOMNIAN_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_FENCE_GATE = ITEMS.register("insomnian_fence_gate", () -> new BlockItem(BMBlocks.INSOMNIAN_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_GRAPE_VINE_POST = ITEMS.register("insomnian_grape_vine_post", () -> new BlockItem(BMBlocks.INSOMNIAN_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_PRESSURE_PLATE = ITEMS.register("insomnian_pressure_plate", () -> new BlockItem(BMBlocks.INSOMNIAN_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_BUTTON = ITEMS.register("insomnian_button", () -> new BlockItem(BMBlocks.INSOMNIAN_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_LADDER = ITEMS.register("insomnian_ladder", () -> new BlockItem(BMBlocks.INSOMNIAN_LADDER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHARJAN_INSOMNIAN_TORCH = ITEMS.register("charjan_insomnian_torch", () -> new WallOrFloorItem(BMBlocks.CHARJAN_INSOMNIAN_TORCH.get(), BMBlocks.CHARJAN_INSOMNIAN_WALL_TORCH.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Avondalic Willow Wood:
    public static final RegistryObject<Item> AVONDALIC_WILLOW_LOG = ITEMS.register("avondalic_willow_log", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_WOOD = ITEMS.register("avondalic_willow_wood", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_AVONDALIC_WILLOW_LOG = ITEMS.register("stripped_avondalic_willow_log", () -> new BlockItem(BMBlocks.STRIPPED_AVONDALIC_WILLOW_LOG.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STRIPPED_AVONDALIC_WILLOW_WOOD = ITEMS.register("stripped_avondalic_willow_wood", () -> new BlockItem(BMBlocks.STRIPPED_AVONDALIC_WILLOW_WOOD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_LEAVES = ITEMS.register("avondalic_willow_leaves", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_SAPLING = ITEMS.register("avondalic_willow_sapling", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_PLANKS = ITEMS.register("avondalic_willow_planks", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_PLANKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_STAIRS = ITEMS.register("avondalic_willow_stairs", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_SLAB = ITEMS.register("avondalic_willow_slab", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_FENCE = ITEMS.register("avondalic_willow_fence", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_FENCE_GATE = ITEMS.register("avondalic_willow_fence_gate", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_GRAPE_VINE_POST = ITEMS.register("avondalic_willow_grape_vine_post", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_DOOR = ITEMS.register("avondalic_willow_door", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_DOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_TRAPDOOR = ITEMS.register("avondalic_willow_trapdoor", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_PRESSURE_PLATE = ITEMS.register("avondalic_willow_pressure_plate", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_BUTTON = ITEMS.register("avondalic_willow_button", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_LADDER = ITEMS.register("avondalic_willow_ladder", () -> new BlockItem(BMBlocks.AVONDALIC_WILLOW_LADDER.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Tabu:
    public static final RegistryObject<Item> GLAZED_TABU = ITEMS.register("glazed_tabu", () -> new BlockItem(BMBlocks.GLAZED_TABU.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CUBIC_TABU = ITEMS.register("cubic_tabu", () -> new BlockItem(BMBlocks.CUBIC_TABU.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CUBIC_TABU_STAIRS = ITEMS.register("cubic_tabu_stairs", () -> new BlockItem(BMBlocks.CUBIC_TABU_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CUBIC_TABU_SLAB = ITEMS.register("cubic_tabu_slab", () -> new BlockItem(BMBlocks.CUBIC_TABU_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TABU_MOSAIC = ITEMS.register("tabu_mosaic", () -> new BlockItem(BMBlocks.TABU_MOSAIC.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TABU_MOSAIC_STAIRS = ITEMS.register("tabu_mosaic_stairs", () -> new BlockItem(BMBlocks.TABU_MOSAIC_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TABU_MOSAIC_SLAB = ITEMS.register("tabu_mosaic_slab", () -> new BlockItem(BMBlocks.TABU_MOSAIC_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TABU_PILLAR = ITEMS.register("tabu_pillar", () -> new BlockItem(BMBlocks.TABU_PILLAR.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Hillaried Stone:
    public static final RegistryObject<Item> HILLARIED_STONE = ITEMS.register("hillaried_stone", () -> new BlockItem(BMBlocks.HILLARIED_STONE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> HILLARIED_STONE_STAIRS = ITEMS.register("hillaried_stone_stairs", () -> new BlockItem(BMBlocks.HILLARIED_STONE_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> HILLARIED_STONE_SLAB = ITEMS.register("hillaried_stone_slab", () -> new BlockItem(BMBlocks.HILLARIED_STONE_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> HILLARIED_STONE_WALL = ITEMS.register("hillaried_stone_wall", () -> new BlockItem(BMBlocks.HILLARIED_STONE_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_HILLARIED_STONE = ITEMS.register("chiseled_hillaried_stone", () -> new BlockItem(BMBlocks.CHISELED_HILLARIED_STONE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_HILLARIED_STONE_BUCKET = ITEMS.register("chiseled_hillaried_stone_bucket", () -> new BlockItem(BMBlocks.CHISELED_HILLARIED_STONE_BUCKET.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> HILLARIED_STONE_PILLAR = ITEMS.register("hillaried_stone_pillar", () -> new BlockItem(BMBlocks.HILLARIED_STONE_PILLAR.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Aljanstone:
    public static final RegistryObject<Item> ALJAMIC_COPPER_ORE = ITEMS.register("aljamic_copper_ore", () -> new BlockItem(BMBlocks.ALJAMIC_COPPER_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMIC_TIN_ORE = ITEMS.register("aljamic_tin_ore", () -> new BlockItem(BMBlocks.ALJAMIC_TIN_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE = ITEMS.register("aljanstone", () -> new BlockItem(BMBlocks.ALJANSTONE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_STAIRS = ITEMS.register("aljanstone_stairs", () -> new BlockItem(BMBlocks.ALJANSTONE_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_SLAB = ITEMS.register("aljanstone_slab", () -> new BlockItem(BMBlocks.ALJANSTONE_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_WALL = ITEMS.register("aljanstone_wall", () -> new BlockItem(BMBlocks.ALJANSTONE_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> COBBLED_ALJANSTONE = ITEMS.register("cobbled_aljanstone", () -> new BlockItem(BMBlocks.COBBLED_ALJANSTONE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> COBBLED_ALJANSTONE_STAIRS = ITEMS.register("cobbled_aljanstone_stairs", () -> new BlockItem(BMBlocks.COBBLED_ALJANSTONE_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> COBBLED_ALJANSTONE_SLAB = ITEMS.register("cobbled_aljanstone_slab", () -> new BlockItem(BMBlocks.COBBLED_ALJANSTONE_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> COBBLED_ALJANSTONE_WALL = ITEMS.register("cobbled_aljanstone_wall", () -> new BlockItem(BMBlocks.COBBLED_ALJANSTONE_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SMOOTH_ALJANSTONE = ITEMS.register("smooth_aljanstone", () -> new BlockItem(BMBlocks.SMOOTH_ALJANSTONE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SMOOTH_ALJANSTONE_SLAB = ITEMS.register("smooth_aljanstone_slab", () -> new BlockItem(BMBlocks.SMOOTH_ALJANSTONE_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_BRICKS = ITEMS.register("aljanstone_bricks", () -> new BlockItem(BMBlocks.ALJANSTONE_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_BRICK_STAIRS = ITEMS.register("aljanstone_brick_stairs", () -> new BlockItem(BMBlocks.ALJANSTONE_BRICK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_BRICK_SLAB = ITEMS.register("aljanstone_brick_slab", () -> new BlockItem(BMBlocks.ALJANSTONE_BRICK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_BRICK_WALL = ITEMS.register("aljanstone_brick_wall", () -> new BlockItem(BMBlocks.ALJANSTONE_BRICK_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_ALJANSTONE_FABRICIO = ITEMS.register("chiseled_aljanstone_fabricio", () -> new BlockItem(BMBlocks.CHISELED_ALJANSTONE_FABRICIO.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_ALJANSTONE_JUNE = ITEMS.register("chiseled_aljanstone_june", () -> new BlockItem(BMBlocks.CHISELED_ALJANSTONE_JUNE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_ALJANSTONE_SOPHIE = ITEMS.register("chiseled_aljanstone_sophie", () -> new BlockItem(BMBlocks.CHISELED_ALJANSTONE_SOPHIE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_ALJANSTONE_LUCIA = ITEMS.register("chiseled_aljanstone_lucia", () -> new BlockItem(BMBlocks.CHISELED_ALJANSTONE_LUCIA.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_ALJANSTONE_CREEPER = ITEMS.register("chiseled_aljanstone_creeper", () -> new BlockItem(BMBlocks.CHISELED_ALJANSTONE_CREEPER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMIC_GRASS_BLOCK = ITEMS.register("aljamic_grass_block", () -> new BlockItem(BMBlocks.ALJAMIC_GRASS_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_NYLIUM = ITEMS.register("avondalic_nylium", () -> new BlockItem(BMBlocks.AVONDALIC_NYLIUM.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMIC_DIRT = ITEMS.register("aljamic_dirt", () -> new BlockItem(BMBlocks.ALJAMIC_DIRT.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMIC_DIRT_PATH = ITEMS.register("aljamic_dirt_path", () -> new BlockItem(BMBlocks.ALJAMIC_DIRT_PATH.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMIC_FARMLAND = ITEMS.register("aljamic_farmland", () -> new BlockItem(BMBlocks.ALJAMIC_FARMLAND.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMIC_SAND = ITEMS.register("aljamic_sand", () -> new BlockItem(BMBlocks.ALJAMIC_SAND.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMIC_GLASS = ITEMS.register("aljamic_glass", () -> new BlockItem(BMBlocks.ALJAMIC_GLASS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMIC_GLASS_PANE = ITEMS.register("aljamic_glass_pane", () -> new BlockItem(BMBlocks.ALJAMIC_GLASS_PANE.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Sleepingstone:
    public static final RegistryObject<Item> SLEEPINGSTONE_ALJAMIC_COPPER_ORE = ITEMS.register("sleepingstone_aljamic_copper_ore", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_ALJAMIC_COPPER_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_ALJAMIC_TIN_ORE = ITEMS.register("sleepingstone_aljamic_tin_ore", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_ALJAMIC_TIN_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE = ITEMS.register("sleepingstone", () -> new BlockItem(BMBlocks.SLEEPINGSTONE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_STAIRS = ITEMS.register("sleepingstone_stairs", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_SLAB = ITEMS.register("sleepingstone_slab", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_WALL = ITEMS.register("sleepingstone_wall", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOGRAVEL = ITEMS.register("insogravel", () -> new BlockItem(BMBlocks.INSOGRAVEL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> POLISHED_SLEEPINGSTONE = ITEMS.register("polished_sleepingstone", () -> new BlockItem(BMBlocks.POLISHED_SLEEPINGSTONE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> POLISHED_SLEEPINGSTONE_STAIRS = ITEMS.register("polished_sleepingstone_stairs", () -> new BlockItem(BMBlocks.POLISHED_SLEEPINGSTONE_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> POLISHED_SLEEPINGSTONE_SLAB = ITEMS.register("polished_sleepingstone_slab", () -> new BlockItem(BMBlocks.POLISHED_SLEEPINGSTONE_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> POLISHED_SLEEPINGSTONE_WALL = ITEMS.register("polished_sleepingstone_wall", () -> new BlockItem(BMBlocks.POLISHED_SLEEPINGSTONE_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_BRICKS = ITEMS.register("sleepingstone_bricks", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_BRICK_STAIRS = ITEMS.register("sleepingstone_brick_stairs", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_BRICK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_BRICK_SLAB = ITEMS.register("sleepingstone_brick_slab", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_BRICK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_BRICK_WALL = ITEMS.register("sleepingstone_brick_wall", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_BRICK_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_SLEEPINGSTONE_FABRICIO = ITEMS.register("chiseled_sleepingstone_fabricio", () -> new BlockItem(BMBlocks.CHISELED_SLEEPINGSTONE_FABRICIO.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_SLEEPINGSTONE_JUNE = ITEMS.register("chiseled_sleepingstone_june", () -> new BlockItem(BMBlocks.CHISELED_SLEEPINGSTONE_JUNE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_SLEEPINGSTONE_SOPHIE = ITEMS.register("chiseled_sleepingstone_sophie", () -> new BlockItem(BMBlocks.CHISELED_SLEEPINGSTONE_SOPHIE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_SLEEPINGSTONE_LUCIA = ITEMS.register("chiseled_sleepingstone_lucia", () -> new BlockItem(BMBlocks.CHISELED_SLEEPINGSTONE_LUCIA.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_SLEEPINGSTONE_CREEPER = ITEMS.register("chiseled_sleepingstone_creeper", () -> new BlockItem(BMBlocks.CHISELED_SLEEPINGSTONE_CREEPER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAN_PORTAL_STAND = ITEMS.register("aljan_portal_stand", () -> new BlockItem(BMBlocks.ALJAN_PORTAL_STAND.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Devil Block Set:
    public static final RegistryObject<Item> DEVIL_ORE = ITEMS.register("devil_ore", () -> new BlockItem(BMBlocks.DEVIL_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEEPSLATE_DEVIL_ORE = ITEMS.register("deepslate_devil_ore", () -> new BlockItem(BMBlocks.DEEPSLATE_DEVIL_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> NETHER_DEVIL_ORE = ITEMS.register("nether_devil_ore", () -> new BlockItem(BMBlocks.NETHER_DEVIL_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_BLOCK = ITEMS.register("devil_block", () -> new BlockItem(BMBlocks.DEVIL_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_DEVIL_BLOCK = ITEMS.register("chiseled_devil_block", () -> new BlockItem(BMBlocks.CHISELED_DEVIL_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CHISELED_DEVIL_BLOCK_SOPHIE = ITEMS.register("sophie_chiseled_devil_block", () -> new BlockItem(BMBlocks.CHISELED_DEVIL_BLOCK_SOPHIE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_ANGELIC_ALLOY_BLOCK = ITEMS.register("devil_angelic_alloy_block", () -> new BlockItem(BMBlocks.DEVIL_ANGELIC_ALLOY_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> RAW_DEVIL_BLOCK = ITEMS.register("raw_devil_block", () -> new BlockItem(BMBlocks.RAW_DEVIL_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_STAIRS = ITEMS.register("devil_stairs", () -> new BlockItem(BMBlocks.DEVIL_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_SLAB = ITEMS.register("devil_slab", () -> new BlockItem(BMBlocks.DEVIL_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_WALL = ITEMS.register("devil_wall", () -> new BlockItem(BMBlocks.DEVIL_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_FENCE = ITEMS.register("devil_fence", () -> new BlockItem(BMBlocks.DEVIL_FENCE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_FENCE_GATE = ITEMS.register("devil_fence_gate", () -> new BlockItem(BMBlocks.DEVIL_FENCE_GATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_BRICKS = ITEMS.register("devil_bricks", () -> new BlockItem(BMBlocks.DEVIL_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_BRICK_STAIRS = ITEMS.register("devil_brick_stairs", () -> new BlockItem(BMBlocks.DEVIL_BRICK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_BRICK_SLAB = ITEMS.register("devil_brick_slab", () -> new BlockItem(BMBlocks.DEVIL_BRICK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_BRICK_WALL = ITEMS.register("devil_brick_wall", () -> new BlockItem(BMBlocks.DEVIL_BRICK_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_WOOL = ITEMS.register("devil_wool", () -> new BlockItem(BMBlocks.DEVIL_WOOL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_CARPET = ITEMS.register("devil_carpet", () -> new BlockItem(BMBlocks.DEVIL_CARPET.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_TERRACOTTA = ITEMS.register("devil_terracotta", () -> new BlockItem(BMBlocks.DEVIL_TERRACOTTA.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_GLAZED_TERRACOTTA = ITEMS.register("devil_glazed_terracotta", () -> new BlockItem(BMBlocks.DEVIL_GLAZED_TERRACOTTA.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_CONCRETE_POWDER = ITEMS.register("devil_concrete_powder", () -> new BlockItem(BMBlocks.DEVIL_CONCRETE_POWDER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_CONCRETE = ITEMS.register("devil_concrete", () -> new BlockItem(BMBlocks.DEVIL_CONCRETE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_STAINED_GLASS = ITEMS.register("devil_stained_glass", () -> new BlockItem(BMBlocks.DEVIL_STAINED_GLASS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_STAINED_GLASS_PANE = ITEMS.register("devil_stained_glass_pane", () -> new BlockItem(BMBlocks.DEVIL_STAINED_GLASS_PANE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_DOOR = ITEMS.register("devil_door", () -> new BlockItem(BMBlocks.DEVIL_DOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_TRAPDOOR = ITEMS.register("devil_trapdoor", () -> new BlockItem(BMBlocks.DEVIL_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_PRESSURE_PLATE = ITEMS.register("devil_pressure_plate", () -> new BlockItem(BMBlocks.DEVIL_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_BUTTON = ITEMS.register("devil_button", () -> new BlockItem(BMBlocks.DEVIL_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEVIL_CHAIN = ITEMS.register("devil_chain", () -> new BlockItem(BMBlocks.DEVIL_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Angelic Block Set:
    public static final RegistryObject<Item> ANGELIC_ORE = ITEMS.register("angelic_ore", () -> new BlockItem(BMBlocks.ANGELIC_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DEEPSLATE_ANGELIC_ORE = ITEMS.register("deepslate_angelic_ore", () -> new BlockItem(BMBlocks.DEEPSLATE_ANGELIC_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_ANGELIC_ORE = ITEMS.register("crystalline_angelic_ore", () -> new BlockItem(BMBlocks.CRYSTALLINE_ANGELIC_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELICAL_CASING = ITEMS.register("angelical_casing", () -> new BlockItem(BMBlocks.ANGELICAL_CASING.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CRYSTALLIZER = ITEMS.register("crystallizer", () -> new CrystallizerItem(BMBlocks.CRYSTALLIZER, new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CRYSTALLINE_CRYSTALLIZER = ITEMS.register("crystalline_crystallizer", () -> new CrystallizerItem(BMBlocks.CRYSTALLINE_CRYSTALLIZER, new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> ANGELIC_BLOCK = ITEMS.register("angelic_block", () -> new BlockItem(BMBlocks.ANGELIC_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_ANGELIC_BLOCK = ITEMS.register("crystalline_angelic_block", () -> new BlockItem(BMBlocks.CRYSTALLINE_ANGELIC_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> RAW_ANGELIC_BLOCK = ITEMS.register("raw_angelic_block", () -> new BlockItem(BMBlocks.RAW_ANGELIC_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_PILLAR = ITEMS.register("angelic_pillar", () -> new BlockItem(BMBlocks.ANGELIC_PILLAR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_BRICKS = ITEMS.register("angelic_bricks", () -> new BlockItem(BMBlocks.ANGELIC_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRACKED_ANGELIC_BRICKS = ITEMS.register("cracked_angelic_bricks", () -> new BlockItem(BMBlocks.CRACKED_ANGELIC_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_BRICK_STAIRS = ITEMS.register("angelic_brick_stairs", () -> new BlockItem(BMBlocks.ANGELIC_BRICK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_BRICK_SLAB = ITEMS.register("angelic_brick_slab", () -> new BlockItem(BMBlocks.ANGELIC_BRICK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_BRICK_WALL = ITEMS.register("angelic_brick_wall", () -> new BlockItem(BMBlocks.ANGELIC_BRICK_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MOSSY_ANGELIC_BRICKS = ITEMS.register("mossy_angelic_bricks", () -> new BlockItem(BMBlocks.MOSSY_ANGELIC_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MOSSY_ANGELIC_BRICK_STAIRS = ITEMS.register("mossy_angelic_brick_stairs", () -> new BlockItem(BMBlocks.MOSSY_ANGELIC_BRICK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MOSSY_ANGELIC_BRICK_SLAB = ITEMS.register("mossy_angelic_brick_slab", () -> new BlockItem(BMBlocks.MOSSY_ANGELIC_BRICK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MOSSY_ANGELIC_BRICK_WALL = ITEMS.register("mossy_angelic_brick_wall", () -> new BlockItem(BMBlocks.MOSSY_ANGELIC_BRICK_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_DOOR = ITEMS.register("angelic_door", () -> new BlockItem(BMBlocks.ANGELIC_DOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_TRAPDOOR = ITEMS.register("angelic_trapdoor", () -> new BlockItem(BMBlocks.ANGELIC_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_PRESSURE_PLATE = ITEMS.register("angelic_pressure_plate", () -> new BlockItem(BMBlocks.ANGELIC_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_BUTTON = ITEMS.register("angelic_button", () -> new BlockItem(BMBlocks.ANGELIC_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_CHAIN = ITEMS.register("angelic_chain", () -> new BlockItem(BMBlocks.ANGELIC_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Christian Mid-Term Block Set:
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_BLOCK = ITEMS.register("christian_mid_term_block", () -> new BlockItem(BMBlocks.CHRISTIAN_MID_TERM_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_DEVIL_ALLOY_BLOCK = ITEMS.register("christian_mid_term_devil_alloy_block", () -> new BlockItem(BMBlocks.CHRISTIAN_MID_TERM_DEVIL_ALLOY_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_ANGELIC_ALLOY_BLOCK = ITEMS.register("christian_mid_term_angelic_alloy_block", () -> new BlockItem(BMBlocks.CHRISTIAN_MID_TERM_ANGELIC_ALLOY_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_CHAIN = ITEMS.register("christian_mid_term_chain", () -> new BlockItem(BMBlocks.CHRISTIAN_MID_TERM_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));

    // Mid-Term Block Set:
    public static final RegistryObject<Item> MID_TERM_ORE = ITEMS.register("mid_term_ore", () -> new GlisteringBlockItem(BMBlocks.MID_TERM_ORE.get(), new Item.Properties().rarity(Rarity.RARE).isImmuneToFire().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_MID_TERM_ORE = ITEMS.register("obsidian_mid_term_ore", () -> new GlisteringBlockItem(BMBlocks.OBSIDIAN_MID_TERM_ORE.get(), new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_BLOCK = ITEMS.register("mid_term_block", () -> new GlisteringBlockItem(BMBlocks.MID_TERM_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> RAW_MID_TERM_BLOCK = ITEMS.register("raw_mid_term_block", () -> new GlisteringBlockItem(BMBlocks.RAW_MID_TERM_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> COLDTERM_BRICKS = ITEMS.register("coldterm_bricks", () -> new BlockItem(BMBlocks.COLDTERM_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> COLDTERM_BRICK_STAIRS = ITEMS.register("coldterm_brick_stairs", () -> new BlockItem(BMBlocks.COLDTERM_BRICK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> COLDTERM_BRICK_SLAB = ITEMS.register("coldterm_brick_slab", () -> new BlockItem(BMBlocks.COLDTERM_BRICK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> COLDTERM_BRICK_WALL = ITEMS.register("coldterm_brick_wall", () -> new BlockItem(BMBlocks.COLDTERM_BRICK_WALL.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> WARMTERM_BRICKS = ITEMS.register("warmterm_bricks", () -> new BlockItem(BMBlocks.WARMTERM_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> WARMTERM_BRICK_STAIRS = ITEMS.register("warmterm_brick_stairs", () -> new BlockItem(BMBlocks.WARMTERM_BRICK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> WARMTERM_BRICK_SLAB = ITEMS.register("warmterm_brick_slab", () -> new BlockItem(BMBlocks.WARMTERM_BRICK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> WARMTERM_BRICK_WALL = ITEMS.register("warmterm_brick_wall", () -> new BlockItem(BMBlocks.WARMTERM_BRICK_WALL.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> OBSIDITERM_BRICKS = ITEMS.register("obsiditerm_bricks", () -> new BlockItem(BMBlocks.OBSIDITERM_BRICKS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> OBSIDITERM_BRICK_STAIRS = ITEMS.register("obsiditerm_brick_stairs", () -> new BlockItem(BMBlocks.OBSIDITERM_BRICK_STAIRS.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> OBSIDITERM_BRICK_SLAB = ITEMS.register("obsiditerm_brick_slab", () -> new BlockItem(BMBlocks.OBSIDITERM_BRICK_SLAB.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> OBSIDITERM_BRICK_WALL = ITEMS.register("obsiditerm_brick_wall", () -> new BlockItem(BMBlocks.OBSIDITERM_BRICK_WALL.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_DOOR = ITEMS.register("mid_term_door", () -> new GlisteringBlockItem(BMBlocks.MID_TERM_DOOR.get(), new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_TRAPDOOR = ITEMS.register("mid_term_trapdoor", () -> new GlisteringBlockItem(BMBlocks.MID_TERM_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.RARE).isImmuneToFire()));
    public static final RegistryObject<Item> MID_TERM_CHAIN = ITEMS.register("mid_term_chain", () -> new GlisteringBlockItem(BMBlocks.MID_TERM_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.RARE).isImmuneToFire()));
    public static final RegistryObject<Item> MID_TERM_LANTERN = ITEMS.register("mid_term_lantern", () -> new GlisteringBlockItem(BMBlocks.MID_TERM_LANTERN.get(), new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_SOUL_LANTERN = ITEMS.register("mid_term_soul_lantern", () -> new GlisteringBlockItem(BMBlocks.MID_TERM_SOUL_LANTERN.get(), new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_HILLARY_LANTERN = ITEMS.register("hilary_mid_term_lantern", () -> new GlisteringBlockItem(BMBlocks.MID_TERM_HILLARY_LANTERN.get(), new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMBlockTab.TAB)));

    // Hillary Light Sources:
    public static final RegistryObject<Item> HILLARY_LANTERN = ITEMS.register("hilary_lantern", () -> new BlockItem(BMBlocks.HILLARY_LANTERN.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> HILLARY_TORCH = ITEMS.register("hillary_torch", () -> new WallOrFloorItem(BMBlocks.HILLARY_TORCH.get(), BMBlocks.HILLARY_WALL_TORCH.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Milkllary Block Set:
    public static final RegistryObject<Item> MILKLLARY_BLOCK = ITEMS.register("milkllary_block", () -> new BlockItem(BMBlocks.MILKLLARY_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARY_CHAIN = ITEMS.register("milkllary_chain", () -> new BlockItem(BMBlocks.MILKLLARY_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));

    // 2/3 Hillary Block Set:
    public static final RegistryObject<Item> MID_HILLARY_BLOCK = ITEMS.register("mid_hillary_block", () -> new BlockItem(BMBlocks.MID_HILLARY_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MID_HILLARY_CHAIN = ITEMS.register("mid_hillary_chain", () -> new BlockItem(BMBlocks.MID_HILLARY_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));

    // Hardened Amaracamel Block Set:
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_BLOCK = ITEMS.register("hardened_amaracamel_block", () -> new BlockItem(BMBlocks.HARDENED_AMARACAMEL_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> STICKY_AMARACAMEL_BLOCK = ITEMS.register("sticky_amaracamel_block", () -> new BlockItem(BMBlocks.STICKY_AMARACAMEL_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Obsidian Infused Mid-Term Block Set:
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_BLOCK = ITEMS.register("obsidian_infused_mid_term_block", () -> new GlisteringBlockItem(BMBlocks.OBSIDIAN_INFUSED_MID_TERM_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_DOOR = ITEMS.register("obsidian_infused_mid_term_door", () -> new GlisteringBlockItem(BMBlocks.OBSIDIAN_INFUSED_MID_TERM_DOOR.get(), new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_TRAPDOOR = ITEMS.register("obsidian_infused_mid_term_trapdoor", () -> new GlisteringBlockItem(BMBlocks.OBSIDIAN_INFUSED_MID_TERM_TRAPDOOR.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.EPIC).isImmuneToFire()));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_CHAIN = ITEMS.register("obsidian_infused_mid_term_chain", () -> new GlisteringBlockItem(BMBlocks.OBSIDIAN_INFUSED_MID_TERM_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.EPIC).isImmuneToFire()));

    // Aljameed Block Set:
    public static final RegistryObject<Item> ALJAMEED_ORE = ITEMS.register("aljameed_ore", () -> new BlockItem(BMBlocks.ALJAMEED_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_ALJAMEED_ORE = ITEMS.register("sleepingstone_aljameed_ore", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_ALJAMEED_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_BLOCK = ITEMS.register("aljameed_block", () -> new BlockItem(BMBlocks.ALJAMEED_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> RAW_ALJAMEED_BLOCK = ITEMS.register("raw_aljameed_block", () -> new BlockItem(BMBlocks.RAW_ALJAMEED_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_CHAIN = ITEMS.register("aljameed_chain", () -> new BlockItem(BMBlocks.ALJAMEED_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_PRESSURE_PLATE = ITEMS.register("aljameed_pressure_plate", () -> new BlockItem(BMBlocks.ALJAMEED_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_BUTTON = ITEMS.register("aljameed_button", () -> new BlockItem(BMBlocks.ALJAMEED_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Aljansteel Block Set:
    public static final RegistryObject<Item> ALJANSTEEL_BLOCK = ITEMS.register("aljansteel_block", () -> new BlockItem(BMBlocks.ALJANSTEEL_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_CHAIN = ITEMS.register("aljansteel_chain", () -> new BlockItem(BMBlocks.ALJANSTEEL_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Moonering Block Set:
    public static final RegistryObject<Item> MOONERING_ORE = ITEMS.register("moonering_ore", () -> new BlockItem(BMBlocks.MOONERING_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_MOONERING_ORE = ITEMS.register("sleepingstone_moonering_ore", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_MOONERING_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MOONERING_BLOCK = ITEMS.register("moonering_block", () -> new BlockItem(BMBlocks.MOONERING_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> RAW_MOONER_BLOCK = ITEMS.register("raw_mooner_block", () -> new BlockItem(BMBlocks.RAW_MOONER_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MOONERING_CHAIN = ITEMS.register("moonering_chain", () -> new BlockItem(BMBlocks.MOONERING_CHAIN.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MOONERING_PRESSURE_PLATE = ITEMS.register("moonering_pressure_plate", () -> new BlockItem(BMBlocks.MOONERING_PRESSURE_PLATE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MOONERING_BUTTON = ITEMS.register("moonering_button", () -> new BlockItem(BMBlocks.MOONERING_BUTTON.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Charjan Coal Block:
    public static final RegistryObject<Item> CHARJAN_COAL_BLOCK = ITEMS.register("charjan_coal_block", () -> new CharjanCoalBlockItem(new Item.Properties().group(BMBlockTab.TAB)));

    // Jantical Block Set:
    public static final RegistryObject<Item> JANTIC_ORE = ITEMS.register("jantic_ore", () -> new BlockItem(BMBlocks.JANTIC_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_JANTIC_ORE = ITEMS.register("sleepingstone_jantic_ore", () -> new BlockItem(BMBlocks.SLEEPINGSTONE_JANTIC_ORE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JANTICAL_BLOCK = ITEMS.register("jantical_block", () -> new BlockItem(BMBlocks.JANTICAL_BLOCK.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.UNCOMMON)));

    // Fruit Leaves & Saplings:
    public static final RegistryObject<Item> GUARANA_OAK_LEAVES = ITEMS.register("guarana_oak_leaves", () -> new BlockItem(BMBlocks.GUARANA_OAK_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GUARANA_OAK_SAPLING = ITEMS.register("guarana_oak_sapling", () -> new BlockItem(BMBlocks.GUARANA_OAK_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MANGO_OAK_LEAVES = ITEMS.register("mango_oak_leaves", () -> new BlockItem(BMBlocks.MANGO_OAK_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MANGO_OAK_SAPLING = ITEMS.register("mango_oak_sapling", () -> new BlockItem(BMBlocks.MANGO_OAK_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MANGAED_MANGO_OAK_LEAVES = ITEMS.register("mangaed_mango_oak_leaves", () -> new BlockItem(BMBlocks.MANGAED_MANGO_OAK_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MANGAED_MANGO_OAK_SAPLING = ITEMS.register("mangaed_mango_oak_sapling", () -> new BlockItem(BMBlocks.MANGAED_MANGO_OAK_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GRAPE_VINE_LEAVES = ITEMS.register("grape_vine_leaves", () -> new BlockItem(BMBlocks.GRAPE_VINE_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> GRAPE_VINE_SAPLING = ITEMS.register("grape_vine_sapling", () -> new BlockItem(BMBlocks.GRAPE_VINE_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> LEMON_OAK_LEAVES = ITEMS.register("lemon_oak_leaves", () -> new BlockItem(BMBlocks.LEMON_OAK_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> LEMON_OAK_SAPLING = ITEMS.register("lemon_oak_sapling", () -> new BlockItem(BMBlocks.LEMON_OAK_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> PINEAPPLE_OAK_LEAVES = ITEMS.register("pineapple_oak_leaves", () -> new BlockItem(BMBlocks.PINEAPPLE_OAK_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> PINEAPPLE_OAK_SAPLING = ITEMS.register("pineapple_oak_sapling", () -> new BlockItem(BMBlocks.PINEAPPLE_OAK_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ORANGE_OAK_LEAVES = ITEMS.register("orange_oak_leaves", () -> new BlockItem(BMBlocks.ORANGE_OAK_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ORANGE_OAK_SAPLING = ITEMS.register("orange_oak_sapling", () -> new BlockItem(BMBlocks.ORANGE_OAK_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> BANANA_JUNGLE_LEAVES = ITEMS.register("banana_jungle_leaves", () -> new BlockItem(BMBlocks.BANANA_JUNGLE_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> BANANA_JUNGLE_SAPLING = ITEMS.register("banana_jungle_sapling", () -> new BlockItem(BMBlocks.BANANA_JUNGLE_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAME_BIRCH_LEAVES = ITEMS.register("aljame_birch_leaves", () -> new BlockItem(BMBlocks.ALJAME_BIRCH_LEAVES.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAME_BIRCH_SAPLING = ITEMS.register("aljame_birch_sapling", () -> new BlockItem(BMBlocks.ALJAME_BIRCH_SAPLING.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Grape Vine Posts:
    public static final RegistryObject<Item> OAK_GRAPE_VINE_POST = ITEMS.register("oak_grape_vine_post", () -> new GrapeVinePostBlockItem(BMBlocks.OAK_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SPRUCE_GRAPE_VINE_POST = ITEMS.register("spruce_grape_vine_post", () -> new GrapeVinePostBlockItem(BMBlocks.SPRUCE_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> BIRCH_GRAPE_VINE_POST = ITEMS.register("birch_grape_vine_post", () -> new GrapeVinePostBlockItem(BMBlocks.BIRCH_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> JUNGLE_GRAPE_VINE_POST = ITEMS.register("jungle_grape_vine_post", () -> new GrapeVinePostBlockItem(BMBlocks.JUNGLE_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ACACIA_GRAPE_VINE_POST = ITEMS.register("acacia_grape_vine_post", () -> new GrapeVinePostBlockItem(BMBlocks.ACACIA_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> DARK_OAK_GRAPE_VINE_POST = ITEMS.register("dark_oak_grape_vine_post", () -> new GrapeVinePostBlockItem(BMBlocks.DARK_OAK_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> CRIMSON_GRAPE_VINE_POST = ITEMS.register("crimson_grape_vine_post", () -> new BlockItem(BMBlocks.CRIMSON_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> WARPED_GRAPE_VINE_POST = ITEMS.register("warped_grape_vine_post", () -> new BlockItem(BMBlocks.WARPED_GRAPE_VINE_POST.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Plants (Flowers, Mushrooms & Wild Crops):
    public static final RegistryObject<Item> RED_YELLOW_FLOWER = ITEMS.register("red_yellow_flower", () -> new BlockItem(BMBlocks.RED_YELLOW_FLOWER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> FRIED_EGG_FLOWER = ITEMS.register("cooked_egg_flower", () -> new BlockItem(BMBlocks.FRIED_EGG_FLOWER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TURTLE_FRIED_EGG_FLOWER = ITEMS.register("turtle_fried_egg_flower", () -> new BlockItem(BMBlocks.TURTLE_FRIED_EGG_FLOWER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ENDER_DRAGON_FRIED_EGG_FLOWER = ITEMS.register("ender_dragon_fried_egg_flower", () -> new BlockItem(BMBlocks.ENDER_DRAGON_FRIED_EGG_FLOWER.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJAN_TULIP = ITEMS.register("aljan_tulip", () -> new BlockItem(BMBlocks.ALJAN_TULIP.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> POISON_ROSE = ITEMS.register("poison_rose", () -> new BlockItem(BMBlocks.POISON_ROSE.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_TULIP = ITEMS.register("insomnian_tulip", () -> new BlockItem(BMBlocks.INSOMNIAN_TULIP.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALJANSHROOM = ITEMS.register("aljanshroom", () -> new BlockItem(BMBlocks.ALJANSHROOM.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPSHROOM = ITEMS.register("sleepshroom", () -> new BlockItem(BMBlocks.SLEEPSHROOM.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> SLEEPYSHROOM = ITEMS.register("sleepyshroom", () -> new BlockItem(BMBlocks.SLEEPYSHROOM.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> WILD_CARAMELED_WHEAT = ITEMS.register("wild_carameled_wheat", () -> new BlockItem(BMBlocks.WILD_CARAMELED_WHEAT.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> WILD_ALJAMIC_ONIONS = ITEMS.register("wild_aljamic_onions", () -> new BlockItem(BMBlocks.WILD_ALJAMIC_ONIONS.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Meal Cooker:
    public static final RegistryObject<Item> MEAL_COOKER = ITEMS.register("meal_cooker", () -> new BlockItem(BMBlocks.MEAL_COOKER.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Plushies (Toys & Emotional Squids):
    public static final RegistryObject<Item> ALICE_TOY = ITEMS.register("alice_toy", () -> new BlockItem(BMBlocks.ALICE_TOY.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ALAN_TOY = ITEMS.register("alan_toy", () -> new BlockItem(BMBlocks.ALAN_TOY.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INNOVATOR_TOY = ITEMS.register("innovator_toy", () -> new BlockItem(BMBlocks.INNOVATOR_TOY.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TYLER_TOY = ITEMS.register("tyler_toy", () -> new BlockItem(BMBlocks.TYLER_TOY.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> MALENA_TOY = ITEMS.register("malena_toy", () -> new BlockItem(BMBlocks.MALENA_TOY.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> LEANDRO_TOY = ITEMS.register("leandro_toy", () -> new BlockItem(BMBlocks.LEANDRO_TOY.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TEENAGER_ALICE_TOY = ITEMS.register("teenager_alice_toy", () -> new BlockItem(BMBlocks.TEENAGER_ALICE_TOY.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TITO = ITEMS.register("tito", () -> new TitoItem(new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> TOTI = ITEMS.register("toti", () -> new TotiItem(new Item.Properties().group(BMBlockTab.TAB)));

    // Mob Heads:
    public static final RegistryObject<Item> ANGRY_SOPHIE_HEAD = ITEMS.register("angry_sophie_head", () -> new BMHeadItem(BMBlocks.ANGRY_SOPHIE_HEAD.get(), BMBlocks.ANGRY_SOPHIE_WALL_HEAD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> INSOMNIA_SOPHIE_HEAD = ITEMS.register("insomnia_sophie_head", () -> new BMHeadItem(BMBlocks.INSOMNIA_SOPHIE_HEAD.get(), BMBlocks.INSOMNIA_SOPHIE_WALL_HEAD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> ZOMBIE_FABRICIO_HEAD = ITEMS.register("zombie_fabricio_head", () -> new BMHeadItem(BMBlocks.ZOMBIE_FABRICIO_HEAD.get(), BMBlocks.ZOMBIE_FABRICIO_WALL_HEAD.get(), new Item.Properties().group(BMBlockTab.TAB)));
    public static final RegistryObject<Item> QUEEN_SOPHIE_HEAD = ITEMS.register("queen_sophie_head", () -> new BMHeadItem(BMBlocks.QUEEN_LUCY_HEAD.get(), BMBlocks.QUEEN_LUCY_WALL_HEAD.get(), new Item.Properties().group(BMBlockTab.TAB).rarity(Rarity.EPIC)));

    // Mob Relics:
    public static final RegistryObject<Item> QUEEN_SOPHIE_RELIC = ITEMS.register("queen_sophie_relic", () -> new BlockItem(BMBlocks.QUEEN_LUCY_RELIC.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> QUEEN_SOPHIE_PET_RELIC = ITEMS.register("queen_sophie_pet_relic", () -> new BlockItem(BMBlocks.QUEEN_SOPHIE_PET_RELIC.get(), new Item.Properties().group(BMBlockTab.TAB).isImmuneToFire().rarity(Rarity.EPIC)));

    // Charjan Wood Torch:
    public static final RegistryObject<Item> CHARJAN_WOOD_TORCH = ITEMS.register("charjan_wood_torch", () -> new WallOrFloorItem(BMBlocks.CHARJAN_WOOD_TORCH.get(), BMBlocks.CHARJAN_WOOD_WALL_TORCH.get(), new Item.Properties().group(BMBlockTab.TAB)));

    // Back Layer:
    public static final RegistryObject<Item> CHARJAN_COAL = ITEMS.register("charjan_coal", () -> new CharjanCoalItem(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> RAW_DEVIL = ITEMS.register("raw_devil", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> RAW_ANGELIC = ITEMS.register("raw_angelic", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> RAW_MID_TERM = ITEMS.register("raw_mid_term", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> RAW_ALJAMEED = ITEMS.register("raw_aljameed", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> RAW_ALJAMIC_COPPER = ITEMS.register("raw_aljamic_copper", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> RAW_ALJAMIC_TIN = ITEMS.register("raw_aljamic_tin", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> RAW_MOONER = ITEMS.register("raw_mooner", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRUSHED_DEVIL_ORE = ITEMS.register("crushed_devil_ore", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRUSHED_ANGELIC_ORE = ITEMS.register("crushed_angelic_ore", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRUSHED_MID_TERM_ORE = ITEMS.register("crushed_mid_term_ore", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> CRUSHED_CHRISTIAN_MID_TERM = ITEMS.register("crushed_christian_mid_term", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CRUSHED_ALJAMEED_ORE = ITEMS.register("crushed_aljameed_ore", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRUSHED_MOONERING_ORE = ITEMS.register("crushed_moonering_ore", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MID_TERM = ITEMS.register("mid_term", () -> new GlisteringItem(new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM = ITEMS.register("obsidian_infused_mid_term", () -> new GlisteringItem(new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BackLayer.TAB)));
    public static final RegistryObject<Item> MILKLLARITY = ITEMS.register("milkllarity", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> EMOTIONAL_SINGULARITY = ITEMS.register("emotional_singularity", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> HEAT_SINGULARITY = ITEMS.register("heat_singularity", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> TEMPERATURE_SINGULARITY = ITEMS.register("temperature_singularity", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CHRISTIANITY_SINGULARITY = ITEMS.register("christianity_singularity", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MANGIBELARITY = ITEMS.register("mangibelarity", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> YIN_YANG = ITEMS.register("yin_yang", () -> new Item(new Item.Properties().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> FRUTIFERY_SINGULARITY_BACKMATH = ITEMS.register("frutifery_singularity_backmath", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> FRUTIFERY_SINGULARITY_MINECRAFT = ITEMS.register("frutifery_singularity_minecraft", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MEATY_SINGULARITY_SOPHIE = ITEMS.register("meaty_singularity_sophie", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MEATY_SINGULARITY_FABRICIO = ITEMS.register("meaty_singularity_fabricio", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MEATY_SINGULARITY_LUCIA = ITEMS.register("meaty_singularity_lucia", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MEATY_SINGULARITY_MINECRAFT = ITEMS.register("meaty_singularity_minecraft", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> FISHY_SINGULARITY = ITEMS.register("fishy_singularity", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> VEGETABLY_SINGULARITY = ITEMS.register("vegetably_singularity", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> VEGETABLY_SINGULARITY_VARIANTS = ITEMS.register("vegetably_singularity_variants", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MULTI_SINGULARITY_FRAME = ITEMS.register("multi_singularity_frame", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_ANGELIC = ITEMS.register("crystalline_angelic", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> JANTICAL = ITEMS.register("jantical", () -> new JanticalItem(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> PERSONA_SHARD = ITEMS.register("persona_shard", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARITY_SHARD = ITEMS.register("milkllarity_shard", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MID_TERM_SHARD = ITEMS.register("mid_term_shard", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_SHARD = ITEMS.register("obsidian_infused_mid_term_shard", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> CRYSTALLINE_ANGELIC_SHARD = ITEMS.register("crystalline_angelic_shard", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> JANTICAL_SHARD = ITEMS.register("jantical_shard", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> DIAMOND_SHARD = ITEMS.register("diamond_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> DEVIL_NUGGET = ITEMS.register("devil_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ANGELIC_NUGGET = ITEMS.register("angelic_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MILKLLARY_NUGGET = ITEMS.register("milkllary_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> TWO_THIRDS_HILLARY_NUGGET = ITEMS.register("mid_hillary_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_NUGGET = ITEMS.register("hardened_amaracamel_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_NUGGET = ITEMS.register("christian_mid_term_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MID_TERM_NUGGET = ITEMS.register("mid_term_nugget", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_NUGGET = ITEMS.register("obsidian_infused_mid_term_nugget", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> ALJAMEED_NUGGET = ITEMS.register("aljameed_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_NUGGET = ITEMS.register("aljansteel_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MOONERING_NUGGET = ITEMS.register("moonering_nugget", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> DEVIL_INGOT = ITEMS.register("devil_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> DEVIL_ANGELIC_ALLOY_INGOT = ITEMS.register("devil_angelic_alloy_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ANGELIC_INGOT = ITEMS.register("angelic_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MILKLLARY_INGOT = ITEMS.register("milkllary_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> TWO_THIRDS_HILLARY_INGOT = ITEMS.register("mid_hillary_ingot", () -> new Item(new Item.Properties().rarity(Rarity.UNCOMMON).group(BackLayer.TAB)));
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_BATTER = ITEMS.register("hardened_amaracamel_batter", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_INGOT = ITEMS.register("hardened_amaracamel_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_INGOT = ITEMS.register("christian_mid_term_ingot", () -> new Item(new Item.Properties().rarity(Rarity.UNCOMMON).group(BackLayer.TAB)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_DEVIL_ALLOY_INGOT = ITEMS.register("christian_mid_term_devil_alloy_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_ANGELIC_ALLOY_INGOT = ITEMS.register("christian_mid_term_angelic_alloy_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MID_TERM_INGOT = ITEMS.register("mid_term_ingot", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_INGOT = ITEMS.register("obsidian_infused_mid_term_ingot", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> OBSIDIAN_INGOT = ITEMS.register("obsidian_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJAMEED_INGOT = ITEMS.register("aljameed_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_INGOT = ITEMS.register("aljansteel_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJAMIC_COPPER_INGOT = ITEMS.register("aljamic_copper_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJAMIC_TIN_INGOT = ITEMS.register("aljamic_tin_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MOONERING_INGOT = ITEMS.register("moonering_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_GUARANA_INGOT = ITEMS.register("crystallized_guarana_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_MANGO_INGOT = ITEMS.register("crystallized_mango_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_MANGAED_MANGO_INGOT = ITEMS.register("crystallized_mangaed_mango_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_GRAPE_INGOT = ITEMS.register("crystallized_grape_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_LEMON_INGOT = ITEMS.register("crystallized_lemon_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_PINEAPPLE_INGOT = ITEMS.register("crystallized_pineapple_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_ORANGE_INGOT = ITEMS.register("crystallized_orange_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_BANANA_INGOT = ITEMS.register("crystallized_banana_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_GUAVA_INGOT = ITEMS.register("crystallized_guava_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_JABUTICABA_INGOT = ITEMS.register("crystallized_jabuticaba_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_ALJAMIC_BERRY_INGOT = ITEMS.register("crystallized_aljamic_berry_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_ALJAME_INGOT = ITEMS.register("crystallized_aljame_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_APPLE_INGOT = ITEMS.register("crystallized_apple_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_GOLDEN_APPLE_INGOT = ITEMS.register("crystallized_golden_apple_ingot", () -> new Item(new Item.Properties().rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_ENCHANTED_GOLDEN_APPLE_INGOT = ITEMS.register("crystallized_enchanted_golden_apple_ingot", () -> new GlisteringItem(new Item.Properties().rarity(Rarity.EPIC).group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_MELON_INGOT = ITEMS.register("crystallized_melon_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_PUMPKIN_INGOT = ITEMS.register("crystallized_pumpkin_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_SWEET_BERRY_INGOT = ITEMS.register("crystallized_sweet_berry_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLIZED_GLOW_BERRY_INGOT = ITEMS.register("crystallized_glow_berry_ingot", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> HILLARY_BUCKET = ITEMS.register("hilary_bucket", () -> new BucketItem(BMFluids.HILLARY, new Item.Properties().containerItem(Items.BUCKET).maxStackSize(1).group(BackLayer.TAB)));
    public static final RegistryObject<Item> MILKLLARY_BUCKET = ITEMS.register("milklary_bucket", () -> new BucketItem(BMFluids.MILKLLARY, new Item.Properties().containerItem(Items.BUCKET).rarity(Rarity.UNCOMMON).maxStackSize(1).group(BackLayer.TAB)));
    public static final RegistryObject<Item> LIQUID_ALJAME_BUCKET = ITEMS.register("liquid_aljame_bucket", () -> new BucketItem(BMFluids.LIQUID_ALJAME, new Item.Properties().containerItem(Items.BUCKET).group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> LIQUID_MANGA_BUCKET = ITEMS.register("liquid_manga_bucket", () -> new BucketItem(BMFluids.LIQUID_MANGA, new Item.Properties().containerItem(Items.BUCKET).group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> LIQUEFIED_MONSTER_BUCKET = ITEMS.register("liquefied_monster_bucket", () -> new BucketItem(BMFluids.LIQUEFIED_MONSTER, new Item.Properties().containerItem(Items.BUCKET).group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> SLEEPISHWATER_BUCKET = ITEMS.register("sleepishwater_bucket", () -> new BucketItem(BMFluids.SLEEPISHWATER, new Item.Properties().containerItem(Items.BUCKET).group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> MOLTEN_MID_TERM_BUCKET = ITEMS.register("molten_mid_term_bucket", () -> new GlisteringItem(new Item.Properties().containerItem(Items.BUCKET).rarity(Rarity.RARE).maxStackSize(1).group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_STICK = ITEMS.register("crystalline_birch_stick", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_STICK = ITEMS.register("goldenwood_stick", () -> new Item(new Item.Properties().rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> GUAVA_STICK = ITEMS.register("guava_stick", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> JABUTICABA_STICK = ITEMS.register("jabuticaba_stick", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CORK_OAK_STICK = ITEMS.register("cork_oak_stick", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_STICK = ITEMS.register("aljanwood_stick", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJANCAP_STICK = ITEMS.register("aljancap_stick", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_STICK = ITEMS.register("insomnian_stick", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_STICK = ITEMS.register("avondalic_willow_stick", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> DEVIL_ROD = ITEMS.register("devil_rod", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ANGELIC_ROD = ITEMS.register("angelic_rod", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> HILLARY_ROD = ITEMS.register("hillary_rod", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MID_TERM_ROD = ITEMS.register("mid_term_rod", () -> new GlisteringItem(new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_BOAT = ITEMS.register("aljanwood_boat", () -> new BMBoatItem(new Item.Properties().maxStackSize(1).group(BackLayer.TAB), "aljanwood"));
    public static final RegistryObject<Item> HUMAN_PATRICK = ITEMS.register("human_patrick", () -> new GlisteringItem(new Item.Properties().rarity(Rarity.EPIC).maxStackSize(1)));
    public static final RegistryObject<Item> CORK_STOPPER = ITEMS.register("cork_stopper", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> INSOFLINT = ITEMS.register("insoflint", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CARAMELED_WHEAT = ITEMS.register("carameled_wheat", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CARAMELED_WHEAT_DOUGH = ITEMS.register("carameled_wheat_dough", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJAMEED_BONE = ITEMS.register("aljameed_bone", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> SLEEPISH_BONE = ITEMS.register("sleepish_bone", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> SLEEPISH_FERTILIZER = ITEMS.register("sleepish_fertilizer", () -> new BoneMealItem(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> JANTSKIN = ITEMS.register("jantskin", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> STICKY_AMARACAMEL_BALL = ITEMS.register("sticky_amaracamel_ball", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> DEVIL_DYE = ITEMS.register("devil_dye", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJAN_LIGHT_BLUE_DYE = ITEMS.register("aljan_light_blue_dye", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> POISON_BROWN_DYE = ITEMS.register("poison_brown_dye", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_DYE = ITEMS.register("insomnian_dye", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ANGELIC_MEAL_PLATE = ITEMS.register("angelic_meal_plate", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> QUEEN_LUCY_BATTLE_INFO = ITEMS.register("queen_sophie_battle_info", () -> new DescriptiveItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire()));
    public static final RegistryObject<Item> REGULAR_MOLDS_BOOK = ITEMS.register("regular_molds_book", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> ADVANCED_MOLDS_BOOK = ITEMS.register("advanced_molds_book", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.RARE).maxStackSize(1)));
    public static final RegistryObject<Item> ALJAMIC_GLASS_BOTTLE = ITEMS.register("aljamic_glass_bottle", () -> new AljamicGlassBottleItem(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> SLEEPISHWATER_BOTTLE = ITEMS.register("sleepishwater_bottle", SleepishwaterBottleItem::new);
    public static final RegistryObject<Item> SOPHIE_FRAGRANCE = ITEMS.register("sophie_fragrance", () -> new Item(new Item.Properties().maxStackSize(1).group(BackLayer.TAB)));
    public static final RegistryObject<Item> GEL_ALCOHOL = ITEMS.register("gel_alcohol", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> HILLARY_DISINFECTANT = ITEMS.register("hilary_disinfectant", () -> new Item(new Item.Properties().maxStackSize(2).group(BackLayer.TAB)));
    public static final RegistryObject<Item> HILLARY_DEODORANT = ITEMS.register("hilary_deodorant", () -> new Item(new Item.Properties().maxStackSize(16).group(BackLayer.TAB)));
    public static final RegistryObject<Item> GLUE = ITEMS.register("glue", () -> new Item(new Item.Properties().maxDamage(384).group(BackLayer.TAB)));
    public static final RegistryObject<Item> TWO_THIRDS_HILLARY_KEY = ITEMS.register("mid_hillary_key", () -> new Item(new Item.Properties().rarity(Rarity.UNCOMMON).maxStackSize(1).group(BackLayer.TAB)));
    public static final RegistryObject<Item> CARAMELED_WHEAT_SEEDS = ITEMS.register("carameled_wheat_seeds", () -> new BlockItem(BMBlocks.CARAMELED_WHEAT.get(), new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> DEVIL_DUST = ITEMS.register("devil_dust", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> DEVIL_ANGELIC_DUST = ITEMS.register("devil_angelic_dust", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> ANGELIC_DUST = ITEMS.register("angelic_dust", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> HILLARY_AGGLOMERATIO = ITEMS.register("hillary_agglomeratio", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MILKLLARY_AGGLOMERATIO = ITEMS.register("milkllary_agglomeratio", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CARAMELED_WHEAT_FLOUR = ITEMS.register("carameled_wheat_flour", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_DUST = ITEMS.register("christian_mid_term_dust", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_DEVIL_DUST = ITEMS.register("christian_mid_term_devil_dust", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_ANGELIC_DUST = ITEMS.register("christian_mid_term_angelic_dust", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MID_TERM_DUST = ITEMS.register("mid_term_dust", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_DUST = ITEMS.register("obsidian_infused_mid_term_dust", () -> new GlisteringItem(new Item.Properties().group(BackLayer.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> ALJAMEED_DUST = ITEMS.register("aljameed_dust", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_BLEND = ITEMS.register("aljansteel_blend", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MOONERING_DUST = ITEMS.register("moonering_dust", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CEBOLINHA_HAIR_STRAND = ITEMS.register("cebolinha_hair_strand", () -> new CebolinhaHairStrandItem(new Item.Properties().rarity(Rarity.UNCOMMON).group(BackLayer.TAB)));
    public static final RegistryObject<Item> SPATH_SIRIUS_BLACK = ITEMS.register("spath_simos_drack", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> BLACK_SULIOS = ITEMS.register("black_sulios", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> EMPTY_MOLD = ITEMS.register("empty_mold", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> INGOT_MOLD = ITEMS.register("ingot_mold", () -> new Item(new Item.Properties().group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> SINGULARITY_MOLD = ITEMS.register("singularity_mold", () -> new Item(new Item.Properties().group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> ROD_MOLD = ITEMS.register("rod_mold", () -> new Item(new Item.Properties().group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> MOLD_MOLD = ITEMS.register("mold_mold", () -> new Item(new Item.Properties().group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> CRYSTALLIZED_MOLD = ITEMS.register("crystallized_mold", () -> new Item(new Item.Properties().group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> CRYSTALLINE_EMPTY_MOLD = ITEMS.register("crystalline_empty_mold", () -> new Item(new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_GEM_MOLD = ITEMS.register("crystalline_gem_mold", () -> new Item(new Item.Properties().group(BackLayer.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> UPGRADE_TOKEN_BASE = ITEMS.register("upgrade_token_base", () -> new UpgradeTokenItem(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON), "base"));
    public static final RegistryObject<Item> UPGRADE_TOKEN_FLAME = ITEMS.register("upgrade_token_flame", () -> new UpgradeTokenItem(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON), "flame"));
    public static final RegistryObject<Item> UPGRADE_TOKEN_CRYSTALLIZER_UPG = ITEMS.register("upgrade_token_crystallizer_upg", () -> new UpgradeTokenItem(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON), "crystallizer_upg"));
    public static final RegistryObject<Item> BLANK_MOB_PERSONA_CARD = ITEMS.register("blank_mob_persona_card", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_WAN_SOP = ITEMS.register("mob_persona_card_wan_sop", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_ANG_SOP = ITEMS.register("mob_persona_card_ang_sop", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_INS_SOP = ITEMS.register("mob_persona_card_ins_sop", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_WAR_SOP = ITEMS.register("mob_persona_card_war_sop", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_QUE_LUC = ITEMS.register("mob_persona_card_que_sop", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_ARC_LUC = ITEMS.register("mob_persona_card_arc_luc", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_KAR_LUC = ITEMS.register("mob_persona_card_kar_luc", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_SHY_FAB = ITEMS.register("mob_persona_card_shy_fab", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> MOB_PERSONA_CARD_MAL = ITEMS.register("mob_persona_card_mal", () -> new Item(new Item.Properties().group(BackLayer.TAB).rarity(Rarity.UNCOMMON).maxStackSize(1)));
    public static final RegistryObject<Item> WANDERER_SOPHIE_SPAWN_EGG = ITEMS.register("friend_sophie_spawn_egg", () -> new BMSpawnEggItem(BMEntities.WANDERER_SOPHIE, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ANGRY_SOPHIE_SPAWN_EGG = ITEMS.register("angry_sophie_spawn_egg", () -> new BMSpawnEggItem(BMEntities.ANGRY_SOPHIE, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> INSOMNIA_SOPHIE_SPAWN_EGG = ITEMS.register("insomnia_sophie_spawn_egg", () -> new BMSpawnEggItem(BMEntities.INSOMNIA_SOPHIE, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ARCHER_INSOMNIA_SOPHIE_SPAWN_EGG = ITEMS.register("archer_insomnia_sophie_spawn_egg", () -> new BMSpawnEggItem(BMEntities.ARCHER_INSOMNIA_SOPHIE, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> WARRIOR_SOPHIE_SPAWN_EGG = ITEMS.register("warrior_sophie_spawn_egg", () -> new BMSpawnEggItem(BMEntities.WARRIOR_SOPHIE, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> QUEEN_LUCY_SPAWN_EGG = ITEMS.register("queen_sophie_spawn_egg", () -> new BMSpawnEggItem(BMEntities.QUEEN_LUCY, 0xffffff, 0xffffff, new Item.Properties().rarity(Rarity.EPIC).isImmuneToFire().group(BackLayer.TAB)));
    public static final RegistryObject<Item> QUEEN_LUCY_PET_SPAWN_EGG = ITEMS.register("queen_sophie_pet_spawn_egg", () -> new BMSpawnEggItem(BMEntities.QUEEN_LUCY_PET, 0xffffff, 0xffffff, new Item.Properties().rarity(Rarity.EPIC).isImmuneToFire().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ARCHER_LUCIA_SPAWN_EGG = ITEMS.register("archer_lucia_spawn_egg", () -> new BMSpawnEggItem(BMEntities.ARCHER_LUCIA, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> KARATE_LUCIA_SPAWN_EGG = ITEMS.register("karate_lucia_spawn_egg", () -> new BMSpawnEggItem(BMEntities.KARATE_LUCIA, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> SHY_FABRICIO_SPAWN_EGG = ITEMS.register("shy_fabricio_spawn_egg", () -> new BMSpawnEggItem(BMEntities.SHY_FABRICIO, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> MALAIKA_SPAWN_EGG = ITEMS.register("malaika_spawn_egg", () -> new BMSpawnEggItem(BMEntities.MALAIKA, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> INSOMNIA_ZOMBIE_SPAWN_EGG = ITEMS.register("insomnia_zombie_spawn_egg", () -> new BMSpawnEggItem(BMEntities.INSOMNIA_ZOMBIE, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ZOMBIE_FABRICIO_SPAWN_EGG = ITEMS.register("zombie_fabricio_spawn_egg", () -> new BMSpawnEggItem(BMEntities.ZOMBIE_FABRICIO, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> ALJAMIC_BONES_SPAWN_EGG = ITEMS.register("aljamic_bones_spawn_egg", () -> new BMSpawnEggItem(BMEntities.ALJAMIC_BONES, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> SLEEPISH_SKELETON_SPAWN_EGG = ITEMS.register("sleepish_skeleton_spawn_egg", () -> new BMSpawnEggItem(BMEntities.SLEEPISH_SKELETON, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> AMARACAMELER_SPAWN_EGG = ITEMS.register("amaracameler_spawn_egg", () -> new BMSpawnEggItem(BMEntities.AMARACAMELER, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> JANTICLE_SPAWN_EGG = ITEMS.register("janticle_spawn_egg", () -> new BMSpawnEggItem(BMEntities.JANTICLE, 0xffffff, 0xffffff, new Item.Properties().group(BackLayer.TAB)));
    public static final RegistryObject<Item> WELLERMAN_DISC = ITEMS.register("wellerman_disc", () -> new MusicDiscItem(4, () -> BMSounds.RECORD_NATHAN_EVANS_WELLERMAN, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> SNOWMAN_DISC = ITEMS.register("snowman_disc", () -> new MusicDiscItem(5, () -> BMSounds.RECORD_SIA_SNOWMAN, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> DADADADA_DA_DISC = ITEMS.register("ericwho_disc", () -> new MusicDiscItem(6, () -> BMSounds.RECORD_ERICWHO1_DADADADA_DA, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> ARCADE_DISC = ITEMS.register("arcade_disc", () -> new MusicDiscItem(7, () -> BMSounds.RECORD_DUNCAN_LAURENCE_ARCADE, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> SUGAR_CRASH_DISC = ITEMS.register("sugar_crash_disc", () -> new MusicDiscItem(8, () -> BMSounds.RECORD_ELYOTTO_SUGAR_CRASH, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> O_ZONIBUS_VAI_DERRAPAR_DISC = ITEMS.register("zonibus_disc", () -> new MusicDiscItem(9, () -> BMSounds.RECORD_HATSUNE_MIKU_O_ZONIBUS_VAI_DERRAPAR, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> IEVAN_POLKKA_DISC = ITEMS.register("ievan_polkka_disc", () -> new MusicDiscItem(10, () -> BMSounds.RECORD_HATSUNE_MIKU_IEVAN_POLKKA, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> NEVER_GONNA_GIVE_YOU_UP_DISC = ITEMS.register("rick_roll_disc", () -> new MusicDiscItem(11, () -> BMSounds.RECORD_RICK_ASTLEY_NEVER_GONNA_GIVE_YOU_UP, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> BEGGIN_DISC = ITEMS.register("beggin_disc", () -> new MusicDiscItem(12, () -> BMSounds.RECORD_MANESKIN_BEGGIN, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> STAY_DISC = ITEMS.register("stay_disc", () -> new MusicDiscItem(13, () -> BMSounds.RECORD_JUSTIN_BIEBER_STAY, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> THE_FLYING_ARM_DISC = ITEMS.register("the_flying_arm_disc", () -> new MusicDiscItem(14, () -> BMSounds.RECORD_SOPHICREEPER_THE_FLYING_ARM, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> SOPHIES_DRAMATIC_ENTRANCE_1_DISC = ITEMS.register("sophies_dramatic_entrance_1_disc", () -> new MusicDiscItem(15, () -> BMSounds.RECORD_SOPHICREEPER_SOPHIES_DRAMATIC_ENTRANCE_1, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> SOPHIES_DRAMATIC_ENTRANCE_2_DISC = ITEMS.register("sophies_dramatic_entrance_2_disc", () -> new MusicDiscItem(15, () -> BMSounds.RECORD_SOPHICREEPER_SOPHIES_DRAMATIC_ENTRANCE_2, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));
    public static final RegistryObject<Item> SOPHIES_DRAMATIC_ENTRANCE_3_DISC = ITEMS.register("sophies_dramatic_entrance_3_disc", () -> new MusicDiscItem(15, () -> BMSounds.RECORD_SOPHICREEPER_SOPHIES_DRAMATIC_ENTRANCE_3, new Item.Properties().maxStackSize(1).rarity(Rarity.RARE).group(BackLayer.TAB)));

    // Back Math Weaponry
    public static final RegistryObject<Item> DEVIL_WARRIOR_HELMET = ITEMS.register("devil_warrior_helmet", () -> new BMArmorItem(WARRIOR_DEVIL_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_HELMET = ITEMS.register("devil_helmet", () -> new BMArmorItem(DEVIL_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_CHESTPLATE = ITEMS.register("devil_chestplate", () -> new BMArmorItem(DEVIL_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_LEGGINGS = ITEMS.register("devil_leggings", () -> new BMArmorItem(DEVIL_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_BOOTS = ITEMS.register("devil_boots", () -> new BMArmorItem(DEVIL_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_WARRIOR_HELMET = ITEMS.register("angelic_warrior_helmet", () -> new BMArmorItem(WARRIOR_ANGELIC_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_HELMET = ITEMS.register("angelic_helmet", () -> new BMArmorItem(ANGELIC_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_CHESTPLATE = ITEMS.register("angelic_chestplate", () -> new BMArmorItem(ANGELIC_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_LEGGINGS = ITEMS.register("angelic_leggings", () -> new BMArmorItem(ANGELIC_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_BOOTS = ITEMS.register("angelic_boots", () -> new BMArmorItem(ANGELIC_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_WARRIOR_HELMET = ITEMS.register("hardened_amaracamel_warrior_helmet", () -> new ArmorItem(WARRIOR_HARDENED_AMARACAMEL_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_HELMET = ITEMS.register("hardened_amaracamel_helmet", () -> new ArmorItem(HARDENED_AMARACAMEL_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_CHESTPLATE = ITEMS.register("hardened_amaracamel_chestplate", () -> new ArmorItem(HARDENED_AMARACAMEL_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_LEGGINGS = ITEMS.register("hardened_amaracamel_leggings", () -> new ArmorItem(HARDENED_AMARACAMEL_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> HARDENED_AMARACAMEL_BOOTS = ITEMS.register("hardened_amaracamel_boots", () -> new ArmorItem(HARDENED_AMARACAMEL_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_WARRIOR_HELMET = ITEMS.register("mid_term_warrior_helmet", () -> new MidTermArmorItem(WARRIOR_MID_TERM_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> MID_TERM_HELMET = ITEMS.register("mid_term_helmet", () -> new MidTermArmorItem(MID_TERM_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> MID_TERM_BREASTPLATE = ITEMS.register("mid_term_breastplate", () -> new MidTermArmorItem(MID_TERM_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> MID_TERM_LEGGINGS = ITEMS.register("mid_term_leggings", () -> new MidTermArmorItem(MID_TERM_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> MID_TERM_BOOTS = ITEMS.register("mid_term_boots", () -> new MidTermArmorItem(MID_TERM_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_WARRIOR_HELMET = ITEMS.register("obsidian_infused_mid_term_warrior_helmet", () -> new MidTermArmorItem(WARRIOR_OBSIDIAN_INFUSED_MID_TERM_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.RARE)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_HELMET = ITEMS.register("obsidian_infused_mid_term_helmet", () -> new GlisteringArmorItem(OBSIDIAN_INFUSED_MID_TERM_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_BREASTPLATE = ITEMS.register("obsidian_infused_mid_term_breastplate", () -> new GlisteringArmorItem(OBSIDIAN_INFUSED_MID_TERM_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_LEGGINGS = ITEMS.register("obsidian_infused_mid_term_leggings", () -> new GlisteringArmorItem(OBSIDIAN_INFUSED_MID_TERM_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_BOOTS = ITEMS.register("obsidian_infused_mid_term_boots", () -> new GlisteringArmorItem(OBSIDIAN_INFUSED_MID_TERM_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.EPIC)));
    public static final RegistryObject<Item> MILKLLARY_HELMET = ITEMS.register("milkllary_helmet", () -> new ArmorItem(MILKLLARY_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARY_CHESTPLATE = ITEMS.register("milkllary_chestplate", () -> new ArmorItem(MILKLLARY_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARY_LEGGINGS = ITEMS.register("milkllary_leggings", () -> new ArmorItem(MILKLLARY_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARY_BOOTS = ITEMS.register("milkllary_boots", () -> new ArmorItem(MILKLLARY_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> JANTSKIN_HELMET = ITEMS.register("jantskin_helmet", () -> new ArmorItem(JANTSKIN_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JANTSKIN_CHESTPLATE = ITEMS.register("jantskin_chestplate", () -> new ArmorItem(JANTSKIN_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JANTSKIN_LEGGINGS = ITEMS.register("jantskin_leggings", () -> new ArmorItem(JANTSKIN_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JANTSKIN_BOOTS = ITEMS.register("jantskin_boots", () -> new ArmorItem(JANTSKIN_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_WARRIOR_HELMET = ITEMS.register("aljameed_warrior_helmet", () -> new ArmorItem(WARRIOR_ALJAMEED_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> ALJAMIC_BONE_HELMET = ITEMS.register("aljamic_bone_helmet", () -> new BMArmorItem(ALJAMIC_BONE_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_HELMET = ITEMS.register("aljameed_helmet", () -> new ArmorItem(ALJAMEED_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_CHESTPLATE = ITEMS.register("aljameed_chestplate", () -> new ArmorItem(ALJAMEED_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_LEGGINGS = ITEMS.register("aljameed_leggings", () -> new ArmorItem(ALJAMEED_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_BOOTS = ITEMS.register("aljameed_boots", () -> new ArmorItem(ALJAMEED_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_WARRIOR_HELMET = ITEMS.register("moonering_warrior_helmet", () -> new ArmorItem(WARRIOR_MOONERING_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_HELMET = ITEMS.register("moonering_helmet", () -> new ArmorItem(MOONERING_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_CHESTPLATE = ITEMS.register("moonering_chestplate", () -> new ArmorItem(MOONERING_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_LEGGINGS = ITEMS.register("moonering_leggings", () -> new ArmorItem(MOONERING_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_BOOTS = ITEMS.register("moonering_boots", () -> new ArmorItem(MOONERING_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIA_SOPHIE_SLEEPWEAR_BLOUSE = ITEMS.register("insomnia_sophie_sleepwear_blouse", () -> new BMArmorItem(INSOMNIA_SOPHIE_SLEEPWEAR_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIA_SOPHIE_SLEEPWEAR_PANTS = ITEMS.register("insomnia_sophie_sleepwear_pants", () -> new BMArmorItem(INSOMNIA_SOPHIE_SLEEPWEAR_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ARCHER_LUCIA_HOOD = ITEMS.register("archer_lucia_hood", () -> new BMArmorItem(ARCHER_LUCIA_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> ARCHER_LUCIA_VEST = ITEMS.register("archer_lucia_vest", () -> new BMArmorItem(ARCHER_LUCIA_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> ARCHER_FABRICIO_HOOD = ITEMS.register("archer_fabricio_hood", () -> new BMArmorItem(ARCHER_FABRICIO_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> ARCHER_FABRICIO_VEST = ITEMS.register("archer_fabricio_vest", () -> new BMArmorItem(ARCHER_FABRICIO_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> QUEEN_LUCY_SHIRT_CURRENT = ITEMS.register("queen_lucy_shirt_current", () -> new QueenLucyShirtItem(QLS_CURRENT, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB), "current"));
    public static final RegistryObject<Item> QUEEN_LUCY_SHIRT_ALT = ITEMS.register("queen_lucy_shirt_alt", () -> new QueenLucyShirtItem(QLS_ALT, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB), "alt"));
    public static final RegistryObject<Item> QUEEN_LUCY_SHIRT_RELIC = ITEMS.register("queen_lucy_shirt_relic", () -> new QueenLucyShirtItem(QLS_RELIC, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB), "relic"));
    public static final RegistryObject<Item> BAKUGOU_HAIR = ITEMS.register("bakugou_hair", () -> new BMArmorItem(BAKUGOU_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> BAKUGOU_BLOUSE = ITEMS.register("bakugou_blouse", () -> new BMArmorItem(BAKUGOU_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> BAKUGOU_PANTS = ITEMS.register("bakugou_pants", () -> new BMArmorItem(BAKUGOU_ARMOR, EquipmentSlotType.LEGS, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> BAKUGOU_SHOES = ITEMS.register("bakugou_shoes", () -> new BMArmorItem(BAKUGOU_ARMOR, EquipmentSlotType.FEET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDEN_PLATED = ITEMS.register("peitoraldeouro", () -> new BMArmorItem(GOLDEN_PLATED_ARMOR, EquipmentSlotType.CHEST, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CANDY_YELLOW_TURTLE_HELMET = ITEMS.register("candy_yellow_turtle_helmet", () -> new BMArmorItem(CANDY_YELLOW_TURTLE_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CANDY_PINK_TURTLE_HELMET = ITEMS.register("candy_pink_turtle_helmet", () -> new BMArmorItem(CANDY_PINK_TURTLE_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CAT_TIARA = ITEMS.register("tiara_de_gato", () -> new BMArmorItem(CAT_TIARA_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DOG_TIARA = ITEMS.register("dog_tiara", () -> new BMArmorItem(DOG_TIARA_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> YELLOW_KARATE_BAND = ITEMS.register("yellow_karate_band", () -> new BMArmorItem(YELLOW_KARATE_BAND_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDEN_HALO = ITEMS.register("golden_halo", () -> new BMArmorItem(GOLDEN_HALO_ARMOR, EquipmentSlotType.HEAD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_CROWN = ITEMS.register("devil_crown", () -> new CrownItem(new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_CROWN = ITEMS.register("angelic_crown", () -> new CrownItem(new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDEN_CROWN = ITEMS.register("golden_crown", () -> new CrownItem(new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_CROWN = ITEMS.register("mid_term_crown", () -> new GlisteringCrownItem(new Item.Properties().rarity(Rarity.RARE).isImmuneToFire().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_CROWN = ITEMS.register("christian_mid_term_crown", () -> new CrownItem(new Item.Properties().rarity(Rarity.UNCOMMON).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_ANGELIC_CROWN = ITEMS.register("crystalline_angelic_crown", () -> new CrownItem(new Item.Properties().rarity(Rarity.UNCOMMON).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKLLARY_CROWN = ITEMS.register("milkllary_crown", () -> new CrownItem(new Item.Properties().rarity(Rarity.UNCOMMON).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_GREATSWORD = ITEMS.register("mid_term_greatsword", () -> new MidTermSwordItem(MID_TERM_SET, 12, -3.4F, new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_WOODEN_SWORD = ITEMS.register("milked_wooden_sword", () -> new MilkedSwordItem(ItemTier.WOOD, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_STONE_SWORD = ITEMS.register("milked_stone_sword", () -> new MilkedSwordItem(ItemTier.STONE, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_GOLDEN_SWORD = ITEMS.register("milked_golden_sword", () -> new MilkedSwordItem(ItemTier.GOLD, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_IRON_SWORD = ITEMS.register("milked_iron_sword", () -> new MilkedSwordItem(ItemTier.IRON, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_DIAMOND_SWORD = ITEMS.register("milked_diamond_sword", () -> new MilkedSwordItem(ItemTier.DIAMOND, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_NETHERITE_SWORD = ITEMS.register("milked_netherite_sword", () -> new MilkedSwordItem(ItemTier.NETHERITE, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire()));
    public static final RegistryObject<Item> MILKED_DEVIL_SWORD = ITEMS.register("milked_devil_sword", () -> new MilkedDevilSwordItem(DEVIL_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_ANGELIC_SWORD = ITEMS.register("milked_angelic_sword", () -> new MilkedSwordItem(ANGELIC_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_MID_TERM_SWORD = ITEMS.register("milked_mid_term_sword", () -> new MilkedMidTermSwordItem(MID_TERM_SET, 3, -2.4F, new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_OBSIDIAN_INFUSED_MID_TERM_SWORD = ITEMS.register("milked_obsidian_infused_mid_term_sword", () -> new MilkedMidTermSwordItem(OBSIDIAN_INFUSED_MID_TERM_SET, 3, -2.4F, new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKEDLLARY_SWORD = ITEMS.register("milked_milkllary_sword", () -> new MilkedSwordItem(MILKLLARY_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKED_OLIVE_SWORD = ITEMS.register("milked_olive_sword", () -> new MilkedSwordItem(OLIVE_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKED_CRYSTALLINE_BIRCH_SWORD = ITEMS.register("milked_crystalline_birch_sword", () -> new MilkedSwordItem(CRYSTALLINE_BIRCH_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_GOLDENWOOD_SWORD = ITEMS.register("milked_goldenwood_sword", () -> new MilkedSwordItem(GOLDENWOOD_SET, 3, -2.4F, new Item.Properties().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_GUAVA_SWORD = ITEMS.register("milked_guava_sword", () -> new MilkedSwordItem(GUAVA_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_JABUTICABA_SWORD = ITEMS.register("milked_jabuticaba_sword", () -> new MilkedSwordItem(JABUTICABA_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_CORK_OAK_SWORD = ITEMS.register("milked_cork_oak_sword", () -> new MilkedSwordItem(CORK_OAK_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_ALJANWOOD_SWORD = ITEMS.register("milked_aljanwood_sword", () -> new MilkedSwordItem(ALJANWOOD_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_ALJANCAP_SWORD = ITEMS.register("milked_aljancap_sword", () -> new MilkedSwordItem(ALJANCAP_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_INSOMNIAN_SWORD = ITEMS.register("milked_insomnian_sword", () -> new MilkedSwordItem(INSOMNIAN_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_AVONDALIC_WILLOW_SWORD = ITEMS.register("milked_avondalic_willow_sword", () -> new MilkedSwordItem(AVONDALIC_WILLOW_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_ALJANSTONE_SWORD = ITEMS.register("milked_aljanstone_sword", () -> new MilkedSwordItem(ALJANSTONE_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_SLEEPINGSTONE_SWORD = ITEMS.register("milked_sleepingstone_sword", () -> new MilkedSwordItem(SLEEPINGSTONE_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_ALJAMEED_BLADE = ITEMS.register("milked_aljameed_blade", () -> new MilkedSwordItem(ALJAMEED_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_ALJANSTEEL_BLADE = ITEMS.register("milked_aljansteel_blade", () -> new MilkedSwordItem(ALJANSTEEL_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_MOONERING_SWORD = ITEMS.register("milked_moonering_sword", () -> new MilkedSwordItem(MOONERING_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_JANTIQUIFIED_MOONERING_SWORD = ITEMS.register("milked_jantiquified_moonering_sword", () -> new MilkedSwordItem(JANTIQUIFIED_MOONERING_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKED_PERSONA_BLADE = ITEMS.register("milked_persona_blade", () -> new MilkedSwordItem(PERSONA_SWORD, 0, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKED_MID_TERM_SPAREY = ITEMS.register("milked_mid_term_sparey", () -> new MilkedCustomSpareySwordItem(MID_TERM_SPAREY_SET, Rarity.RARE));
    public static final RegistryObject<Item> MILKED_OBSIDIAN_INFUSED_MID_TERM_SPAREY = ITEMS.register("milked_obsidian_infused_mid_term_sparey", () -> new MilkedCustomSpareySwordItem(OBSIDIAN_INFUSED_MID_TERM_SPAREY_SET, Rarity.EPIC));
    public static final RegistryObject<Item> MILKED_SPAREY = ITEMS.register("milked_sparey", MilkedSpareySwordItem::new);
    public static final RegistryObject<Item> MILKED_DEVIL_SPAREY = ITEMS.register("milked_devil_sparey", MilkedDevilSpareySwordItem::new);
    public static final RegistryObject<Item> MILKED_GOLDEN_PATTY = ITEMS.register("milked_empada_de_ouro", () -> new MilkedSwordItem(ItemTier.GOLD, 3, -2.4F, new Item.Properties().food(Foods.GOLDEN_APPLE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKED_BUTTER_SWORD = ITEMS.register("milked_espada_de_manteiga", () -> new MilkedButterSwordItem(BUTTER_SET, 3, -2.4F, new Item.Properties().food(Foods.BAKED_POTATO).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_SWORD = ITEMS.register("devil_sword", () -> new DevilSwordItem(DEVIL_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_PICKAXE = ITEMS.register("devil_pickaxe", () -> new PickaxeItem(DEVIL_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_SHOVEL = ITEMS.register("devil_shovel", () -> new ShovelItem(DEVIL_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_AXE = ITEMS.register("devil_axe", () -> new AxeItem(DEVIL_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_HOE = ITEMS.register("devil_hoe", () -> new HoeItem(DEVIL_SET, -2, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_SWORD = ITEMS.register("angelic_sword", () -> new SwordItem(ANGELIC_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_PICKAXE = ITEMS.register("angelic_pickaxe", () -> new PickaxeItem(ANGELIC_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_SHOVEL = ITEMS.register("angelic_shovel", () -> new ShovelItem(ANGELIC_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_SPOON = ITEMS.register("spoon", () -> new ShovelItem(ItemTier.IRON, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_AXE = ITEMS.register("angelic_axe", () -> new AxeItem(ANGELIC_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_HOE = ITEMS.register("angelic_hoe", () -> new HoeItem(ANGELIC_SET, -2, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_SWORD = ITEMS.register("mid_term_sword", () -> new MidTermSwordItem(MID_TERM_SET, 3, -2.4F, new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_PICKAXE = ITEMS.register("mid_term_pickaxe", () -> new MidTermPickaxeItem(MID_TERM_SET, 1, -2.8F, new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_SHOVEL = ITEMS.register("mid_term_shovel", () -> new MidTermShovelItem(MID_TERM_SET, 5, -2.8F, new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_AXE = ITEMS.register("mid_term_axe", () -> new MidTermAxeItem(MID_TERM_SET, 1.5F, -3.0F, new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_HOE = ITEMS.register("mid_term_hoe", () -> new MidTermHoeItem(MID_TERM_SET, -2, -1.0F, new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_SWORD = ITEMS.register("obsidian_infused_mid_term_sword", () -> new MidTermSwordItem(OBSIDIAN_INFUSED_MID_TERM_SET, 3, -2.4F, new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_PICKAXE = ITEMS.register("obsidian_infused_mid_term_pickaxe", () -> new MidTermPickaxeItem(OBSIDIAN_INFUSED_MID_TERM_SET, 1, -2.8F, new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_SHOVEL = ITEMS.register("obsidian_infused_mid_term_shovel", () -> new MidTermShovelItem(OBSIDIAN_INFUSED_MID_TERM_SET, 5, -2.8F, new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_AXE = ITEMS.register("obsidian_infused_mid_term_axe", () -> new MidTermAxeItem(OBSIDIAN_INFUSED_MID_TERM_SET, 1.5F, -3.0F, new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_HOE = ITEMS.register("obsidian_infused_mid_term_hoe", () -> new MidTermHoeItem(OBSIDIAN_INFUSED_MID_TERM_SET, -2, -1.0F, new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKLLARY_SWORD = ITEMS.register("milkllary_sword", () -> new SwordItem(MILKLLARY_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARY_PICKAXE = ITEMS.register("milkllary_pickaxe", () -> new PickaxeItem(MILKLLARY_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARY_SHOVEL = ITEMS.register("milkllary_shovel", () -> new ShovelItem(MILKLLARY_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARY_AXE = ITEMS.register("milkllary_axe", () -> new AxeItem(MILKLLARY_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> MILKLLARY_HOE = ITEMS.register("milkllary_hoe", () -> new HoeItem(MILKLLARY_SET, -2, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> OLIVE_SWORD = ITEMS.register("olive_sword", () -> new SwordItem(OLIVE_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> OLIVE_PICKAXE = ITEMS.register("olive_pickaxe", () -> new PickaxeItem(OLIVE_SET, 9, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> OLIVE_SHOVEL = ITEMS.register("olive_shovel", () -> new ShovelItem(OLIVE_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> OLIVE_AXE = ITEMS.register("olive_axe", () -> new AxeItem(OLIVE_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> OLIVE_HOE = ITEMS.register("olive_hoe", () -> new HoeItem(OLIVE_SET, -1, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> SPAREY = ITEMS.register("sparey", SpareySwordItem::new);
    public static final RegistryObject<Item> STACKS = ITEMS.register("stacks", StacksPickaxeItem::new);
    public static final RegistryObject<Item> SPAXE = ITEMS.register("spaxe", SpaxeAxeItem::new);
    public static final RegistryObject<Item> SPAVEL = ITEMS.register("spavel", SpavelShovelItem::new);
    public static final RegistryObject<Item> STOE = ITEMS.register("stoe", StoeHoeItem::new);
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_SWORD = ITEMS.register("crystalline_birch_sword", () -> new SwordItem(CRYSTALLINE_BIRCH_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_PICKAXE = ITEMS.register("crystalline_birch_pickaxe", () -> new PickaxeItem(CRYSTALLINE_BIRCH_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_SHOVEL = ITEMS.register("crystalline_birch_shovel", () -> new ShovelItem(CRYSTALLINE_BIRCH_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_AXE = ITEMS.register("crystalline_birch_axe", () -> new AxeItem(CRYSTALLINE_BIRCH_SET, 6.0F, -3.2F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_HOE = ITEMS.register("crystalline_birch_hoe", () -> new HoeItem(CRYSTALLINE_BIRCH_SET, 0, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_SWORD = ITEMS.register("goldenwood_sword", () -> new SwordItem(GOLDENWOOD_SET, 3, -2.4F, new Item.Properties().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_PICKAXE = ITEMS.register("goldenwood_pickaxe", () -> new PickaxeItem(GOLDENWOOD_SET, 1, -2.8F, new Item.Properties().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_SHOVEL = ITEMS.register("goldenwood_shovel", () -> new ShovelItem(GOLDENWOOD_SET, 1.5F, -3.0F, new Item.Properties().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_AXE = ITEMS.register("goldenwood_axe", () -> new AxeItem(GOLDENWOOD_SET, 6.0F, -3.2F, new Item.Properties().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_HOE = ITEMS.register("goldenwood_hoe", () -> new HoeItem(GOLDENWOOD_SET, 0, -3.0F, new Item.Properties().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GUAVA_SWORD = ITEMS.register("guava_sword", () -> new SwordItem(GUAVA_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GUAVA_PICKAXE = ITEMS.register("guava_pickaxe", () -> new PickaxeItem(GUAVA_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GUAVA_SHOVEL = ITEMS.register("guava_shovel", () -> new ShovelItem(GUAVA_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GUAVA_AXE = ITEMS.register("guava_axe", () -> new AxeItem(GUAVA_SET, 6.0F, -3.2F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GUAVA_HOE = ITEMS.register("guava_hoe", () -> new HoeItem(GUAVA_SET, 0, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_SWORD = ITEMS.register("jabuticaba_sword", () -> new SwordItem(JABUTICABA_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_PICKAXE = ITEMS.register("jabuticaba_pickaxe", () -> new PickaxeItem(JABUTICABA_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_SHOVEL = ITEMS.register("jabuticaba_shovel", () -> new ShovelItem(JABUTICABA_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_AXE = ITEMS.register("jabuticaba_axe", () -> new AxeItem(JABUTICABA_SET, 6.0F, -3.2F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_HOE = ITEMS.register("jabuticaba_hoe", () -> new HoeItem(JABUTICABA_SET, 0, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_SWORD = ITEMS.register("cork_oak_sword", () -> new SwordItem(CORK_OAK_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_PICKAXE = ITEMS.register("cork_oak_pickaxe", () -> new PickaxeItem(CORK_OAK_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_SHOVEL = ITEMS.register("cork_oak_shovel", () -> new ShovelItem(CORK_OAK_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_AXE = ITEMS.register("cork_oak_axe", () -> new AxeItem(CORK_OAK_SET, 6.0F, -3.2F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_HOE = ITEMS.register("cork_oak_hoe", () -> new HoeItem(CORK_OAK_SET, 0, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_SWORD = ITEMS.register("aljanwood_sword", () -> new SwordItem(ALJANWOOD_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_PICKAXE = ITEMS.register("aljanwood_pickaxe", () -> new PickaxeItem(ALJANWOOD_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_SHOVEL = ITEMS.register("aljanwood_shovel", () -> new ShovelItem(ALJANWOOD_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_AXE = ITEMS.register("aljanwood_axe", () -> new AxeItem(ALJANWOOD_SET, 6.0F, -3.2F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_HOE = ITEMS.register("aljanwood_hoe", () -> new HoeItem(ALJANWOOD_SET, 0, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_SWORD = ITEMS.register("aljancap_sword", () -> new SwordItem(ALJANCAP_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_PICKAXE = ITEMS.register("aljancap_pickaxe", () -> new PickaxeItem(ALJANCAP_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_SHOVEL = ITEMS.register("aljancap_shovel", () -> new ShovelItem(ALJANCAP_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_AXE = ITEMS.register("aljancap_axe", () -> new AxeItem(ALJANCAP_SET, 6.0F, -3.2F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_HOE = ITEMS.register("aljancap_hoe", () -> new HoeItem(ALJANCAP_SET, 0, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_SWORD = ITEMS.register("insomnian_sword", () -> new SwordItem(INSOMNIAN_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_PICKAXE = ITEMS.register("insomnian_pickaxe", () -> new PickaxeItem(INSOMNIAN_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_SHOVEL = ITEMS.register("insomnian_shovel", () -> new ShovelItem(INSOMNIAN_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_AXE = ITEMS.register("insomnian_axe", () -> new AxeItem(INSOMNIAN_SET, 6.0F, -3.2F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_HOE = ITEMS.register("insomnian_hoe", () -> new HoeItem(INSOMNIAN_SET, 0, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_SWORD = ITEMS.register("avondalic_willow_sword", () -> new SwordItem(AVONDALIC_WILLOW_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_PICKAXE = ITEMS.register("avondalic_willow_pickaxe", () -> new PickaxeItem(AVONDALIC_WILLOW_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_SHOVEL = ITEMS.register("avondalic_willow_shovel", () -> new ShovelItem(AVONDALIC_WILLOW_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_AXE = ITEMS.register("avondalic_willow_axe", () -> new AxeItem(AVONDALIC_WILLOW_SET, 6.0F, -3.2F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_HOE = ITEMS.register("avondalic_willow_hoe", () -> new HoeItem(AVONDALIC_WILLOW_SET, 0, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_SWORD = ITEMS.register("aljanstone_sword", () -> new SwordItem(ALJANSTONE_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_PICKAXE = ITEMS.register("aljanstone_pickaxe", () -> new PickaxeItem(ALJANSTONE_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_SHOVEL = ITEMS.register("aljanstone_shovel", () -> new ShovelItem(ALJANSTONE_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_AXE = ITEMS.register("aljanstone_axe", () -> new AxeItem(ALJANSTONE_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_HOE = ITEMS.register("aljanstone_hoe", () -> new HoeItem(ALJANSTONE_SET, -1, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_SWORD = ITEMS.register("sleepingstone_sword", () -> new SwordItem(SLEEPINGSTONE_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_PICKAXE = ITEMS.register("sleepingstone_pickaxe", () -> new PickaxeItem(SLEEPINGSTONE_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_SHOVEL = ITEMS.register("sleepingstone_shovel", () -> new ShovelItem(SLEEPINGSTONE_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_AXE = ITEMS.register("sleepingstone_axe", () -> new AxeItem(SLEEPINGSTONE_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_HOE = ITEMS.register("sleepingstone_hoe", () -> new HoeItem(SLEEPINGSTONE_SET, -1, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_BLADE = ITEMS.register("aljameed_blade", () -> new SwordItem(ALJAMEED_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_PICK = ITEMS.register("aljameed_pick", () -> new PickaxeItem(ALJAMEED_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_SHOVEL = ITEMS.register("aljameed_shovel", () -> new ShovelItem(ALJAMEED_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_AXE = ITEMS.register("aljameed_axe", () -> new AxeItem(ALJAMEED_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_HOE = ITEMS.register("aljameed_hoe", () -> new HoeItem(ALJAMEED_SET, -2, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_BLADE = ITEMS.register("aljansteel_blade", () -> new SwordItem(ALJANSTEEL_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_PICK = ITEMS.register("aljansteel_pick", () -> new PickaxeItem(ALJANSTEEL_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_SHOVEL = ITEMS.register("aljansteel_shovel", () -> new ShovelItem(ALJANSTEEL_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_AXE = ITEMS.register("aljansteel_axe", () -> new AxeItem(ALJANSTEEL_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_HOE = ITEMS.register("aljansteel_hoe", () -> new HoeItem(ALJANSTEEL_SET, -2, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_BACKSTABBER = ITEMS.register("moonering_backstabber", () -> new SwordItem(MOONERING_SET, 4, -2.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_SWORD = ITEMS.register("moonering_sword", () -> new SwordItem(MOONERING_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_PICKAXE = ITEMS.register("moonering_pickaxe", () -> new PickaxeItem(MOONERING_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_SHOVEL = ITEMS.register("moonering_shovel", () -> new ShovelItem(MOONERING_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_AXE = ITEMS.register("moonering_axe", () -> new AxeItem(MOONERING_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_HOE = ITEMS.register("moonering_hoe", () -> new HoeItem(MOONERING_SET, -1, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JANTIQUIFIED_MOONERING_SWORD = ITEMS.register("jantiquified_moonering_sword", () -> new SwordItem(JANTIQUIFIED_MOONERING_SET, 3, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> JANTIQUIFIED_MOONERING_PICKAXE = ITEMS.register("jantiquified_moonering_pickaxe", () -> new PickaxeItem(JANTIQUIFIED_MOONERING_SET, 1, -2.8F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> JANTIQUIFIED_MOONERING_SHOVEL = ITEMS.register("jantiquified_moonering_shovel", () -> new ShovelItem(JANTIQUIFIED_MOONERING_SET, 1.5F, -3.0F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> JANTIQUIFIED_MOONERING_AXE = ITEMS.register("jantiquified_moonering_axe", () -> new AxeItem(JANTIQUIFIED_MOONERING_SET, 6.0F, -3.1F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> JANTIQUIFIED_MOONERING_HOE = ITEMS.register("jantiquified_moonering_hoe", () -> new HoeItem(JANTIQUIFIED_MOONERING_SET, -1, -1.0F, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> WOODEN_KNIFE = ITEMS.register("wooden_knife", () -> new KnifeItem(2, -1.6f, ItemTier.WOOD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> STONE_KNIFE = ITEMS.register("stone_knife", () -> new KnifeItem(2, -1.6f, ItemTier.STONE, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> IRON_KNIFE = ITEMS.register("iron_knife", () -> new KnifeItem(2, -1.6f, ItemTier.IRON, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDEN_KNIFE = ITEMS.register("golden_knife", () -> new KnifeItem(2, -1.6f, ItemTier.GOLD, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DIAMOND_KNIFE = ITEMS.register("diamond_knife", () -> new KnifeItem(2, -1.6f, ItemTier.DIAMOND, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> NETHERITE_KNIFE = ITEMS.register("netherite_knife", () -> new KnifeItem(2, -1.6f, ItemTier.NETHERITE, new Item.Properties().isImmuneToFire().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_KNIFE = ITEMS.register("devil_knife", () -> new DevilKnifeItem(2, -1.6f, DEVIL_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_KNIFE = ITEMS.register("angelic_knife", () -> new KnifeItem(2, -1.6f, ANGELIC_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_KNIFE = ITEMS.register("mid_term_knife", () -> new GlisteringKnifeItem(2, -1.6f, MID_TERM_SET, new Item.Properties().isImmuneToFire().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_KNIFE = ITEMS.register("obsidian_infused_mid_term_knife", () -> new GlisteringKnifeItem(2, -1.6f, OBSIDIAN_INFUSED_MID_TERM_SET, new Item.Properties().isImmuneToFire().rarity(Rarity.EPIC).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MILKLLARY_KNIFE = ITEMS.register("milkllary_knife", () -> new KnifeItem(2, -1.6f, MILKLLARY_SET, new Item.Properties().rarity(Rarity.UNCOMMON).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> OLIVE_KNIFE = ITEMS.register("olive_knife", () -> new KnifeItem(2, -1.6f, OLIVE_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_KNIFE = ITEMS.register("crystalline_birch_knife", () -> new KnifeItem(2, -1.6f, CRYSTALLINE_BIRCH_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_KNIFE = ITEMS.register("goldenwood_knife", () -> new KnifeItem(2, -1.6f, CORK_OAK_SET, new Item.Properties().rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GUAVA_KNIFE = ITEMS.register("guava_knife", () -> new KnifeItem(2, -1.6f, GUAVA_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_KNIFE = ITEMS.register("jabuticaba_knife", () -> new KnifeItem(2, -1.6f, JABUTICABA_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CORK_OAK_KNIFE = ITEMS.register("cork_oak_knife", () -> new KnifeItem(2, -1.6f, CORK_OAK_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_KNIFE = ITEMS.register("aljanwood_knife", () -> new KnifeItem(2, -1.6f, ALJANWOOD_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_KNIFE = ITEMS.register("aljancap_knife", () -> new KnifeItem(2, -1.6f, ALJANCAP_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_KNIFE = ITEMS.register("insomnian_knife", () -> new KnifeItem(2, -1.6f, INSOMNIAN_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_KNIFE = ITEMS.register("avondalic_willow_knife", () -> new KnifeItem(2, -1.6f, AVONDALIC_WILLOW_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTONE_KNIFE = ITEMS.register("aljanstone_knife", () -> new KnifeItem(2, -1.6f, ALJANSTONE_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> SLEEPINGSTONE_KNIFE = ITEMS.register("sleepingstone_knife", () -> new KnifeItem(2, -1.6f, SLEEPINGSTONE_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_KNIFE = ITEMS.register("aljameed_knife", () -> new KnifeItem(2, -1.6f, ALJAMEED_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANSTEEL_KNIFE = ITEMS.register("aljansteel_knife", () -> new KnifeItem(2, -1.6f, ALJANSTEEL_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_KNIFE = ITEMS.register("moonering_knife", () -> new KnifeItem(2, -1.6f, MOONERING_SET, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JANTIQUIFIED_MOONERING_KNIFE = ITEMS.register("jantiquified_moonering_knife", () -> new KnifeItem(2, -1.6f, JANTIQUIFIED_MOONERING_SET, new Item.Properties().rarity(Rarity.UNCOMMON).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> PERSONA_BLADE = ITEMS.register("persona_blade", () -> new SwordItem(PERSONA_SWORD, 0, -2.4f, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> CAREWNI = ITEMS.register("carewni", () -> new SwordItem(CAREWNI_SWORD, 0, -2.4f, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON)));
    public static final RegistryObject<Item> GOLDEN_PATTY = ITEMS.register("empada_de_ouro", () -> new SwordItem(ItemTier.GOLD, 3, -2.4F, new Item.Properties().food(Foods.GOLDEN_APPLE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> BUTTER_SWORD = ITEMS.register("espada_de_manteiga", () -> new ButterSwordItem(BUTTER_SET, 3, -2.4F, new Item.Properties().food(Foods.BAKED_POTATO).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MECH_MECH = ITEMS.register("mech_mech", MechMechSwordItem::new);
    public static final RegistryObject<Item> DEVIL_SPAREY = ITEMS.register("devil_sparey", DevilSpareySwordItem::new);
    public static final RegistryObject<Item> MID_TERM_SPAREY = ITEMS.register("mid_term_sparey", () -> new CustomSpareySwordItem(MID_TERM_SPAREY_SET, Rarity.RARE));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_SPAREY = ITEMS.register("obsidian_infused_mid_term_sparey", () -> new CustomSpareySwordItem(OBSIDIAN_INFUSED_MID_TERM_SPAREY_SET, Rarity.EPIC));
    public static final RegistryObject<Item> RAINBOW_PENCIL = ITEMS.register("lapis_rainbow", () -> new SwordItem(RAINBOW_SET, 1, -2.4F, new Item.Properties().food(Foods.APPLE).group(BMWeaponryTab.TAB))); // used to place lava
    public static final RegistryObject<Item> KARATE_TRAINING_STICK = ITEMS.register("karate_training_stick", () -> new SwordItem(ItemTier.DIAMOND, 0, -2.4F, new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> QUEEN_SOPHIE_SUMMONER_STAFF = ITEMS.register("queen_sophie_summoner_staff", () -> new QueenLucySummonerStaffItem(BMEntities.QUEEN_LUCY_PET, 0xffffff, 0xffffff, new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.EPIC).maxStackSize(1).isImmuneToFire()));
    public static final RegistryObject<Item> WATER_TALC_POWDER = ITEMS.register("talco_de_agua", () -> new WaterTalcPowderItem(TALC_SET, 0, -2.4F, new Item.Properties().food(new Food.Builder().hunger(4).saturation(0.3F).build()).group(BMWeaponryTab.TAB).maxStackSize(1)));
    public static final RegistryObject<Item> INSOFLINT_AND_ALJANSTEEL = ITEMS.register("aljamic_flint_and_aljansteel", () -> new FlintAndSteelItem(new Item.Properties().maxDamage(250).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_BOW = ITEMS.register("devil_bow", () -> new DevilBowItem(new Item.Properties().group(BMWeaponryTab.TAB).maxDamage(720)));
    public static final RegistryObject<Item> ANGELIC_BOW = ITEMS.register("angelic_bow", () -> new AngelicBowItem(new Item.Properties().group(BMWeaponryTab.TAB).maxDamage(840)));
    public static final RegistryObject<Item> MID_TERM_BOW = ITEMS.register("mid_term_bow", () -> new MidTermBowItem(new Item.Properties().maxDamage(2031).rarity(Rarity.RARE).isImmuneToFire().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_CROSSBOW = ITEMS.register("devil_crossbow", BMCrossbowItem::new);
    public static final RegistryObject<Item> ANGELIC_CROSSBOW = ITEMS.register("angelic_crossbow", BMCrossbowItem::new);
    public static final RegistryObject<Item> CHOCOGLUE = ITEMS.register("chocoglue", () -> new ChocoGlueItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> PINK_GUM_FRYING_PAN = ITEMS.register("pink_gum_frying_pan", () -> new PinkGumFryingPanItem(new Item.Properties().maxDamage(1024).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIA_ARROW = ITEMS.register("insomnia_arrow", () -> new InsomniaArrowItem(new Item.Properties().group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MORTAR_AND_PESTLE = ITEMS.register("mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> CRYSTALLINE_BIRCH_MORTAR_AND_PESTLE = ITEMS.register("crystalline_birch_mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GOLDENWOOD_MORTAR_AND_PESTLE = ITEMS.register("goldenwood_mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).rarity(Rarity.RARE).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> GUAVA_MORTAR_AND_PESTLE = ITEMS.register("guava_mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> JABUTICABA_MORTAR_AND_PESTLE = ITEMS.register("jabuticaba_mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANWOOD_MORTAR_AND_PESTLE = ITEMS.register("aljanwood_mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJANCAP_MORTAR_AND_PESTLE = ITEMS.register("aljancap_mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> INSOMNIAN_MORTAR_AND_PESTLE = ITEMS.register("insomnian_mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> AVONDALIC_WILLOW_MORTAR_AND_PESTLE = ITEMS.register("avondalic_willow_mortar_and_pestle", () -> new MortarAndPestleItem(new Item.Properties().maxDamage(384).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> DEVIL_SHEARS = ITEMS.register("devil_shears", () -> new ShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).maxDamage(250)));
    public static final RegistryObject<Item> ANGELIC_SHEARS = ITEMS.register("angelic_shears", () -> new ShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).maxDamage(250)));
    public static final RegistryObject<Item> MID_TERM_SHEARS = ITEMS.register("mid_term_shears", () -> new MidTermShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).isImmuneToFire().rarity(Rarity.RARE).maxDamage(4062)));
    public static final RegistryObject<Item> OBSIDIAN_INFUSED_MID_TERM_SHEARS = ITEMS.register("obsidian_infused_mid_term_shears", () -> new GlisteringShearsItem(new Item.Properties().isImmuneToFire().group(BMWeaponryTab.TAB).rarity(Rarity.EPIC).maxDamage(4062)));
    public static final RegistryObject<Item> CHRISTIAN_MID_TERM_SHEARS = ITEMS.register("christian_mid_term_shears", () -> new ShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON).maxDamage(250)));
    public static final RegistryObject<Item> MILKLLARY_SHEARS = ITEMS.register("milkllary_shears", () -> new ShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON).maxDamage(450)));
    public static final RegistryObject<Item> ALJAMEED_SHEARS = ITEMS.register("aljameed_shears", () -> new ShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).maxDamage(250)));
    public static final RegistryObject<Item> ALJANSTEEL_SHEARS = ITEMS.register("aljansteel_shears", () -> new ShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).maxDamage(250)));
    public static final RegistryObject<Item> MOONERING_SHEARS = ITEMS.register("moonering_shears", () -> new ShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).maxDamage(1561)));
    public static final RegistryObject<Item> JANTIQUIFIED_MOONERING_SHEARS = ITEMS.register("jantiquified_moonering_shears", () -> new ShearsItem(new Item.Properties().group(BMWeaponryTab.TAB).rarity(Rarity.UNCOMMON).maxDamage(2031)));
    public static final RegistryObject<Item> DEVIL_SHIELD = ITEMS.register("devil_shield", () -> new BMShieldItem(new Item.Properties().maxStackSize(1).maxDamage(550).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ANGELIC_SHIELD = ITEMS.register("angelic_shield", () -> new BMShieldItem(new Item.Properties().maxStackSize(1).maxDamage(250).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MID_TERM_SHIELD = ITEMS.register("mid_term_shield", () -> new GlisteringBMShieldItem(new Item.Properties().rarity(Rarity.RARE).isImmuneToFire().maxStackSize(1).maxDamage(4062).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> ALJAMEED_SHIELD = ITEMS.register("aljameed_shield", () -> new BMShieldItem(new Item.Properties().maxStackSize(1).maxDamage(250).group(BMWeaponryTab.TAB)));
    public static final RegistryObject<Item> MOONERING_SHIELD = ITEMS.register("moonering_shield", () -> new BMShieldItem(new Item.Properties().maxStackSize(1).maxDamage(1561).group(BMWeaponryTab.TAB)));

    // BackMath Foods
    public static final RegistryObject<Item> GUARANA = ITEMS.register("guarana", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> MANGO = ITEMS.register("mango", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> MANGAED_MANGO = ITEMS.register("mangaed_mango", () -> new MangaedMangoItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> GRAPES = ITEMS.register("grapes", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.SWEET_BERRIES)));
    public static final RegistryObject<Item> LEMON = ITEMS.register("lemon", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> PINEAPPLE = ITEMS.register("pineapple", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BAKED_POTATO)));
    public static final RegistryObject<Item> ORANGE = ITEMS.register("orange", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> BANANA = ITEMS.register("banana", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> GUAVA = ITEMS.register("guava", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.GUAVA)));
    public static final RegistryObject<Item> JABUTICABA = ITEMS.register("jabuticaba", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.JABUTICABA)));
    public static final RegistryObject<Item> GREEN_APPLE = ITEMS.register("green_apple", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> ALJAMIC_ONION = ITEMS.register("aljamic_onion", () -> new BlockNamedItem(BMBlocks.ALJAMIC_ONIONS.get(), new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> ALJAMIC_BERRY = ITEMS.register("aljamic_berry", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.ALJAMIC_BERRY)));
    public static final RegistryObject<Item> ALJAME = ITEMS.register("aljame", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.ALJAME)));
    public static final RegistryObject<Item> JANTIQUIFIED_ALJAME = ITEMS.register("jantiquified_aljame", () -> new Item(new Item.Properties().rarity(Rarity.RARE).group(SophiesCursedFoods.TAB).food(BMFoods.JANTIQUIFIED_ALJAME)));
    public static final RegistryObject<Item> HOLY_JANTIQUIFIED_ALJAME = ITEMS.register("holy_jantiquified_aljame", () -> new GlisteringItem(new Item.Properties().rarity(Rarity.EPIC).group(SophiesCursedFoods.TAB).food(BMFoods.HOLY_JANTIQUIFIED_ALJAME)));
    public static final RegistryObject<Item> CUT_GUARANA = ITEMS.register("cut_guarana", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_APPLE)));
    public static final RegistryObject<Item> CUT_MANGO = ITEMS.register("cut_mango", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_CARROT)));
    public static final RegistryObject<Item> CUT_GRAPES = ITEMS.register("cut_grapes", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_SWEET_BERRIES)));
    public static final RegistryObject<Item> CUT_LEMON = ITEMS.register("cut_lemon", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_APPLE)));
    public static final RegistryObject<Item> CUT_PINEAPPLE = ITEMS.register("cut_pineapple", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_BAKED_POTATO)));
    public static final RegistryObject<Item> CUT_ORANGE = ITEMS.register("cut_orange", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_APPLE)));
    public static final RegistryObject<Item> CUT_BANANA = ITEMS.register("cut_banana", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_APPLE)));
    public static final RegistryObject<Item> CUT_GUAVA = ITEMS.register("cut_guava", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_GUAVA)));
    public static final RegistryObject<Item> CUT_JABUTICABA = ITEMS.register("cut_jabuticaba", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_JABUTICABA)));
    public static final RegistryObject<Item> CUT_ALJAMIC_BERRY = ITEMS.register("cut_aljamic_berry", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_ALJAMIC_BERRY)));
    public static final RegistryObject<Item> CUT_ALJAME = ITEMS.register("cut_aljame", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_ALJAME)));
    public static final RegistryObject<Item> CUT_JANTIQUIFIED_ALJAME = ITEMS.register("cut_jantiquified_aljame", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).rarity(Rarity.RARE).food(BMFoods.HALVED_JANTIQUIFIED_ALJAME)));
    public static final RegistryObject<Item> CUT_HOLY_JANTIQUIFIED_ALJAME = ITEMS.register("cut_holy_jantiquified_aljame", () -> new GlisteringItem(new Item.Properties().group(SophiesCursedFoods.TAB).rarity(Rarity.EPIC).food(BMFoods.HALVED_HOLY_JANTIQUIFIED_ALJAME)));
    public static final RegistryObject<Item> CUT_GREEN_APPLE = ITEMS.register("cut_green_apple", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_APPLE)));
    public static final RegistryObject<Item> CUT_APPLE = ITEMS.register("cut_apple", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_APPLE)));
    public static final RegistryObject<Item> CUT_GOLDEN_APPLE = ITEMS.register("cut_golden_apple", () -> new Item(new Item.Properties().rarity(Rarity.RARE).group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_GOLDEN_APPLE)));
    public static final RegistryObject<Item> CUT_ENCHANTED_GOLDEN_APPLE = ITEMS.register("cut_enchanted_golden_apple", () -> new GlisteringItem(new Item.Properties().rarity(Rarity.EPIC).group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_ENCHANTED_GOLDEN_APPLE)));
    public static final RegistryObject<Item> PUMPKIN_SLICE = ITEMS.register("pumpkin_slice", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_HONEY_BOTTLE)));
    public static final RegistryObject<Item> CUT_SWEET_BERRIES = ITEMS.register("cut_sweet_berries", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_SWEET_BERRIES)));
    public static final RegistryObject<Item> CUT_GLOW_BERRIES = ITEMS.register("cut_glow_berries", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.HALVED_SWEET_BERRIES)));
    public static final RegistryObject<Item> GUARANA_JUICE = ITEMS.register("guarana_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> MANGO_JUICE = ITEMS.register("mango_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> MANGA_JUICE = ITEMS.register("manga_juice", () -> new MangaedMangoJuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> GRAPE_JUICE = ITEMS.register("grape_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> LEMON_JUICE = ITEMS.register("lemon_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> PINEAPPLE_JUICE = ITEMS.register("pineapple_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> ORANGE_JUICE = ITEMS.register("orange_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> BANANA_JUICE = ITEMS.register("banana_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> GUAVA_JUICE = ITEMS.register("guava_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(BMFoods.GUAVA)));
    public static final RegistryObject<Item> JABUTICABADA = ITEMS.register("jabuticabada", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(BMFoods.JABUTICABA)));
    public static final RegistryObject<Item> GREEN_APPLE_JUICE = ITEMS.register("green_apple_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> ALJAMIC_BERRY_JUICE = ITEMS.register("aljamic_berry_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(BMFoods.ALJAMIC_BERRY)));
    public static final RegistryObject<Item> ALJAMIC_ALJAMIC_BERRY_JUICE = ITEMS.register("aljamic_aljamic_berry_juice", () -> new JuiceItem(new Item.Properties().containerItem(AxolotlTest.ALJAMIC_GLASS_BOTTLE.get()).group(SophiesCursedFoods.TAB).food(BMFoods.ALJAMIC_BERRY)));
    public static final RegistryObject<Item> ALJAME_JUICE = ITEMS.register("aljame_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(BMFoods.ALJAME)));
    public static final RegistryObject<Item> ALJAMIC_ALJAME_JUICE = ITEMS.register("aljamic_aljame_juice", () -> new JuiceItem(new Item.Properties().containerItem(AxolotlTest.ALJAMIC_GLASS_BOTTLE.get()).group(SophiesCursedFoods.TAB).food(BMFoods.ALJAME)));
    public static final RegistryObject<Item> APPLE_JUICE = ITEMS.register("apple_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> GOLDEN_APPLE_JUICE = ITEMS.register("golden_apple_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).rarity(Rarity.RARE).group(SophiesCursedFoods.TAB).food(Foods.GOLDEN_APPLE)));
    public static final RegistryObject<Item> ENCHANTED_GOLDEN_APPLE_JUICE = ITEMS.register("enchanted_golden_apple_juice", () -> new GlisteringJuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).rarity(Rarity.EPIC).group(SophiesCursedFoods.TAB).food(Foods.ENCHANTED_GOLDEN_APPLE)));
    public static final RegistryObject<Item> MELON_JUICE = ITEMS.register("melon_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.MELON_SLICE)));
    public static final RegistryObject<Item> PUMPKIN_JUICE = ITEMS.register("pumpkin_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.HONEY)));
    public static final RegistryObject<Item> SWEET_BERRY_JUICE = ITEMS.register("sweet_berry_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.SWEET_BERRIES)));
    public static final RegistryObject<Item> GLOW_BERRY_JUICE = ITEMS.register("glow_berry_juice", () -> new JuiceItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).group(SophiesCursedFoods.TAB).food(Foods.SWEET_BERRIES)));
    public static final RegistryObject<Item> GUARANA_POPSICLE = ITEMS.register("guarana_popsicle", () -> new PopsicleItem(Foods.APPLE));
    public static final RegistryObject<Item> MANGO_POPSICLE = ITEMS.register("mango_popsicle", () -> new PopsicleItem(Foods.CARROT));
    public static final RegistryObject<Item> MANGA_POPSICLE = ITEMS.register("manga_popsicle", () -> new MangaedMangoPopsicleItem(Foods.CARROT));
    public static final RegistryObject<Item> GRAPE_POPSICLE = ITEMS.register("grape_popsicle", () -> new PopsicleItem(Foods.BREAD));
    public static final RegistryObject<Item> LEMON_POPSICLE = ITEMS.register("lemon_popsicle", () -> new PopsicleItem(Foods.BREAD));
    public static final RegistryObject<Item> PINEAPPLE_POPSICLE = ITEMS.register("pineapple_popsicle", () -> new PopsicleItem(Foods.BREAD));
    public static final RegistryObject<Item> ORANGE_POPSICLE = ITEMS.register("orange_popsicle", () -> new PopsicleItem(Foods.BREAD));
    public static final RegistryObject<Item> BANANA_POPSICLE = ITEMS.register("banana_popsicle", () -> new PopsicleItem(Foods.BREAD));
    public static final RegistryObject<Item> GUAVA_POPSICLE = ITEMS.register("guava_popsicle", () -> new PopsicleItem(BMFoods.GUAVA));
    public static final RegistryObject<Item> JABUTICABA_POPSICLE = ITEMS.register("jabuticaba_popsicle", () -> new PopsicleItem(BMFoods.JABUTICABA));
    public static final RegistryObject<Item> GREEN_APPLE_POPSICLE = ITEMS.register("green_apple_popsicle", () -> new PopsicleItem(Foods.APPLE));
    public static final RegistryObject<Item> ALJAMIC_BERRY_POPSICLE = ITEMS.register("aljamic_berry_popsicle", () -> new PopsicleItem(BMFoods.ALJAMIC_BERRY));
    public static final RegistryObject<Item> ALJAME_POPSICLE = ITEMS.register("aljame_popsicle", () -> new PopsicleItem(BMFoods.ALJAME));
    public static final RegistryObject<Item> WATER_POPSICLE = ITEMS.register("water_popsicle", () -> new PopsicleItem(Foods.BAKED_POTATO));
    public static final RegistryObject<Item> HILLARY_POPSICLE = ITEMS.register("hillary_popsicle", () -> new PopsicleItem(Foods.BAKED_POTATO));
    public static final RegistryObject<Item> MILKLLARY_POPSICLE = ITEMS.register("milkllary_popsicle", () -> new PopsicleItem(Foods.BAKED_POTATO));
    public static final RegistryObject<Item> APPLE_POPSICLE = ITEMS.register("apple_popsicle", () -> new PopsicleItem(Foods.APPLE));
    public static final RegistryObject<Item> GOLDEN_APPLE_POPSICLE = ITEMS.register("golden_apple_popsicle", () -> new GoldenApplePopsicleItem(Foods.GOLDEN_APPLE));
    public static final RegistryObject<Item> ENCHANTED_GOLDEN_APPLE_POPSICLE = ITEMS.register("enchanted_golden_apple_popsicle", () -> new EnchantedGoldenApplePopsicleItem(Foods.ENCHANTED_GOLDEN_APPLE));
    public static final RegistryObject<Item> MELON_POPSICLE = ITEMS.register("melon_popsicle", () -> new PopsicleItem(Foods.MELON_SLICE));
    public static final RegistryObject<Item> PUMPKIN_POPSICLE = ITEMS.register("pumpkin_popsicle", () -> new PopsicleItem(Foods.HONEY));
    public static final RegistryObject<Item> SWEET_BERRY_POPSICLE = ITEMS.register("sweet_berry_popsicle", () -> new PopsicleItem(Foods.SWEET_BERRIES));
    public static final RegistryObject<Item> GLOW_BERRY_POPSICLE = ITEMS.register("glow_berry_popsicle", () -> new PopsicleItem(Foods.SWEET_BERRIES));
    public static final RegistryObject<Item> JAM_POT = ITEMS.register("jam_pot", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> GUARANA_JAM = ITEMS.register("guarana_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> MANGO_JAM = ITEMS.register("mango_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> MANGA_JAM = ITEMS.register("manga_jam", () -> new MangaedMangoJamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> GRAPE_JAM = ITEMS.register("grape_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> LEMON_JAM = ITEMS.register("lemon_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> PINEAPPLE_JAM = ITEMS.register("pineapple_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> ORANGE_JAM = ITEMS.register("orange_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> BANANA_JAM = ITEMS.register("banana_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> GUAVA_JAM = ITEMS.register("guava_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.GUAVA)));
    public static final RegistryObject<Item> JABUTICABA_JAM = ITEMS.register("jabuticaba_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.JABUTICABA)));
    public static final RegistryObject<Item> GREEN_APPLE_JAM = ITEMS.register("green_apple_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> ALJAMIC_BERRY_JAM = ITEMS.register("aljamic_berry_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.ALJAMIC_BERRY)));
    public static final RegistryObject<Item> ALJAME_JAM = ITEMS.register("aljame_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.ALJAME)));
    public static final RegistryObject<Item> WATER_JAM = ITEMS.register("water_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).containerItem(AxolotlTest.JAM_POT.get()).food(Foods.SWEET_BERRIES)));
    public static final RegistryObject<Item> MILK_POT = ITEMS.register("milk_pot", () -> new JamItem(new Item.Properties().containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> LAVA_POT = ITEMS.register("lava_pot", () -> new JamItem(new Item.Properties().containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> POWDER_SNOW_POT = ITEMS.register("powder_snow_pot", () -> new JamItem(new Item.Properties().containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> HILLARY_JAM = ITEMS.register("hilary_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).containerItem(AxolotlTest.JAM_POT.get()).food(Foods.APPLE)));
    public static final RegistryObject<Item> MILKLLARY_JAM = ITEMS.register("milklary_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).containerItem(AxolotlTest.JAM_POT.get()).food(Foods.BAKED_POTATO)));
    public static final RegistryObject<Item> APPLE_JAM = ITEMS.register("apple_jam", () -> new JamItem(new Item.Properties().containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> GOLDEN_APPLE_JAM = ITEMS.register("golden_apple_jam", () -> new JamItem(new Item.Properties().containerItem(AxolotlTest.JAM_POT.get()).rarity(Rarity.RARE).group(SophiesCursedFoods.TAB).food(Foods.GOLDEN_APPLE)));
    public static final RegistryObject<Item> ENCHANTED_GOLDEN_APPLE_JAM = ITEMS.register("enchanted_golden_apple_jam", () -> new GlisteringJamItem(new Item.Properties().containerItem(AxolotlTest.JAM_POT.get()).rarity(Rarity.EPIC).group(SophiesCursedFoods.TAB).food(Foods.ENCHANTED_GOLDEN_APPLE)));
    public static final RegistryObject<Item> MELON_JAM = ITEMS.register("melon_jam", () -> new JamItem(new Item.Properties().containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.MELON_SLICE)));
    public static final RegistryObject<Item> PUMPKIN_JAM = ITEMS.register("pumpkin_jam", () -> new JamItem(new Item.Properties().containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.HONEY)));
    public static final RegistryObject<Item> SWEET_BERRY_JAM = ITEMS.register("sweet_berry_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).containerItem(AxolotlTest.JAM_POT.get()).food(Foods.SWEET_BERRIES)));
    public static final RegistryObject<Item> GLOW_BERRY_JAM = ITEMS.register("glow_berry_jam", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).containerItem(AxolotlTest.JAM_POT.get()).food(Foods.SWEET_BERRIES)));
    public static final RegistryObject<Item> COOKIE_POT = ITEMS.register("cookie_pot", () -> new JamItem(new Item.Properties().group(SophiesCursedFoods.TAB).containerItem(AxolotlTest.JAM_POT.get()).food(Foods.COOKIE)));
    public static final RegistryObject<Item> BEETROOT_SOUP_POT = ITEMS.register("beetroot_soup_pot", () -> new JamItem(new Item.Properties().maxStackSize(1).containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.BEETROOT_SOUP)));
    public static final RegistryObject<Item> MUSHROOM_STEW_POT = ITEMS.register("mushroom_stew_pot", () -> new JamItem(new Item.Properties().maxStackSize(1).containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.MUSHROOM_STEW)));
    public static final RegistryObject<Item> RABBIT_STEW_POT = ITEMS.register("rabbit_stew_pot", () -> new JamItem(new Item.Properties().maxStackSize(1).containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.RABBIT_STEW)));
    public static final RegistryObject<Item> FUNGI_STEW_POT = ITEMS.register("fungi_stew_pot", () -> new JamItem(new Item.Properties().maxStackSize(1).containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.MUSHROOM_STEW)));
    public static final RegistryObject<Item> END_FUNGI_STEW_POT = ITEMS.register("end_fungi_stew_pot", () -> new JamItem(new Item.Properties().maxStackSize(1).containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.MUSHROOM_STEW)));
    public static final RegistryObject<Item> ALJAN_FUNGI_STEW_POT = ITEMS.register("aljan_fungi_stew_pot", () -> new JamItem(new Item.Properties().maxStackSize(1).containerItem(AxolotlTest.JAM_POT.get()).group(SophiesCursedFoods.TAB).food(Foods.MUSHROOM_STEW)));
    public static final RegistryObject<Item> ALJAN_FUNGI_STEW = ITEMS.register("aljan_fungi_stew", () -> new SoupItem(new Item.Properties().group(SophiesCursedFoods.TAB).maxStackSize(1).food(Foods.MUSHROOM_STEW)));
    public static final RegistryObject<Item> GUARANA_JAM_BREAD = ITEMS.register("guarana_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> MANGO_JAM_BREAD = ITEMS.register("mango_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> MANGA_JAM_BREAD = ITEMS.register("manga_jam_bread", () -> new MangaedMangoJamBreadItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.CARROT)));
    public static final RegistryObject<Item> GRAPE_JAM_BREAD = ITEMS.register("grape_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.SWEET_BERRIES)));
    public static final RegistryObject<Item> LEMON_JAM_BREAD = ITEMS.register("lemon_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> PINEAPPLE_JAM_BREAD = ITEMS.register("pineapple_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BAKED_POTATO)));
    public static final RegistryObject<Item> ORANGE_JAM_BREAD = ITEMS.register("orange_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> BANANA_JAM_BREAD = ITEMS.register("banana_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BREAD)));
    public static final RegistryObject<Item> GUAVA_JAM_BREAD = ITEMS.register("guava_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.GUAVA)));
    public static final RegistryObject<Item> JABUTICABA_JAM_BREAD = ITEMS.register("jabuticaba_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.JABUTICABA)));
    public static final RegistryObject<Item> GREEN_APPLE_JAM_BREAD = ITEMS.register("green_apple_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> ALJAMIC_BERRY_JAM_BREAD = ITEMS.register("aljamic_berry_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.ALJAMIC_BERRY)));
    public static final RegistryObject<Item> ALJAME_JAM_BREAD = ITEMS.register("aljame_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.ALJAME)));
    public static final RegistryObject<Item> WATER_DROPLET_BREAD = ITEMS.register("water_droplet_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(4).saturation(0.6F).build())));
    public static final RegistryObject<Item> ZE_DROPLET_BREAD = ITEMS.register("ze_droplet_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(4).saturation(0.6F).build())));
    public static final RegistryObject<Item> HILLARY_JAM_BREAD = ITEMS.register("hilary_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(7).saturation(2.65F).build())));
    public static final RegistryObject<Item> MILKLLARY_JAM_BREAD = ITEMS.register("milklary_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(10).saturation(3.0F).build())));
    public static final RegistryObject<Item> APPLE_JAM_BREAD = ITEMS.register("apple_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> GOLDEN_APPLE_JAM_BREAD = ITEMS.register("golden_apple_jam_bread", () -> new Item(new Item.Properties().rarity(Rarity.RARE).group(SophiesCursedFoods.TAB).food(Foods.GOLDEN_APPLE)));
    public static final RegistryObject<Item> ENCHANTED_GOLDEN_APPLE_JAM_BREAD = ITEMS.register("enchanted_golden_apple_jam_bread", () -> new GlisteringItem(new Item.Properties().rarity(Rarity.EPIC).group(SophiesCursedFoods.TAB).food(Foods.ENCHANTED_GOLDEN_APPLE)));
    public static final RegistryObject<Item> MELON_JAM_BREAD = ITEMS.register("melon_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.MELON_SLICE)));
    public static final RegistryObject<Item> PUMPKIN_JAM_BREAD = ITEMS.register("pumpkin_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.HONEY)));
    public static final RegistryObject<Item> SWEET_BERRY_JAM_BREAD = ITEMS.register("sweet_berry_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(4).saturation(0.6F).build())));
    public static final RegistryObject<Item> GLOW_BERRY_JAM_BREAD = ITEMS.register("glow_berry_jam_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(4).saturation(0.6F).build())));
    public static final RegistryObject<Item> FRIED_EGG_BREAD = ITEMS.register("fried_egg_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(5).saturation(0.93f).build())));
    public static final RegistryObject<Item> BREAD_WITH_PAO = ITEMS.register("bread_with_pao", () -> new DescriptiveItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(10).saturation(1.2f).build())));
    public static final RegistryObject<Item> CHOCOLATE = ITEMS.register("chocolate", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> HONEYED_BREAD = ITEMS.register("honeyed_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BAKED_POTATO)));
    public static final RegistryObject<Item> NUTELLA_CHOCOLATE = ITEMS.register("nutella_chocolate", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BAKED_POTATO)));
    public static final RegistryObject<Item> AMARACAMEL_BATTER_BREAD = ITEMS.register("amaracamel_batter_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.AMARACAMEL)));
    public static final RegistryObject<Item> AMARACAMEL_BATTER_TOAST = ITEMS.register("amaracamel_batter_toast", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.AMARACAMEL)));
    public static final RegistryObject<Item> MONSTER_ENERGY_DRINK = ITEMS.register("monster_energy_drink", BottleDrinkItem::new);
    public static final RegistryObject<Item> ENERGETIC_MONSTER = ITEMS.register("energetic_monster", BottleDrinkItem::new);
    public static final RegistryObject<Item> WINE = ITEMS.register("wine", WineItem::new);
    public static final RegistryObject<Item> JABUTICABA_WINE = ITEMS.register("jabuticaba_wine", WineItem::new);
    public static final RegistryObject<Item> ALJAME_TEA_BOX = ITEMS.register("aljame_tea_box", () -> new AljameTeaBoxItem(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> ALJAME_TEA = ITEMS.register("aljame_tea", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> ALJAME_TEACUP = ITEMS.register("aljame_teacup", () -> new AljameTeacupItem(new Item.Properties().food(BMFoods.ALJAME_TEACUP).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> PATIENCE_TEA = ITEMS.register("patience_tea", () -> new PatienceTeaItem(new Item.Properties().food(Foods.BAKED_POTATO).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> PEACE_TEA = ITEMS.register("peace_tea", () -> new PeaceTeaItem(new Item.Properties().food(Foods.BAKED_POTATO).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> DISGUST_TEA = ITEMS.register("disgust_tea", () -> new DisgustTeaItem(new Item.Properties().food(Foods.BAKED_POTATO).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> MOOD_TEA = ITEMS.register("mood_tea", () -> new MoodTeaItem(new Item.Properties().food(Foods.BAKED_POTATO).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> AMARACAMEL_JUICE = ITEMS.register("amaracamel_juice", () -> new RegularDrinkItem(new Item.Properties().containerItem(Items.BUCKET).maxStackSize(1).food(BMFoods.AMARACAMEL_JUICE).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> COFFEE_MUG = ITEMS.register("coffee_mug", BucketDrinkItem::new);
    public static final RegistryObject<Item> CHOCCY_MILK_BUCKET = ITEMS.register("choccy_milk_bucket", () -> new RegularDrinkItem(new Item.Properties().containerItem(Items.BUCKET).maxStackSize(1).food(new Food.Builder().hunger(5).saturation(4).effect(() -> new EffectInstance(Effects.SPEED, 200, 1), 1.0F).effect(() -> new EffectInstance(Effects.HASTE, 100, 1), 1.0F).build()).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> CHOCCY_MILK_BOTTLE = ITEMS.register("choccy_milk_bottle", () -> new RegularDrinkItem(new Item.Properties().containerItem(Items.GLASS_BOTTLE).maxStackSize(8).food(new Food.Builder().hunger(5).saturation(4)/* it was 6.5f*/.effect(() -> new EffectInstance(Effects.SPEED, 100, 0), 1.0F).effect(() -> new EffectInstance(Effects.HASTE, 50, 0), 0.5F).build()).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> HILLARY_BOTTLE = ITEMS.register("hillary_bottle", () -> new BottleDrinkAltItem(new Item.Properties().group(SophiesCursedFoods.TAB).containerItem(Items.GLASS_BOTTLE)));
    public static final RegistryObject<Item> MILKLLARY_BOTTLE = ITEMS.register("milkllary_bottle", () -> new BottleDrinkAltItem(new Item.Properties().rarity(Rarity.UNCOMMON).group(SophiesCursedFoods.TAB).containerItem(Items.GLASS_BOTTLE)));
    public static final RegistryObject<Item> TODDY = ITEMS.register("toddy", ToddyItem::new);
    public static final RegistryObject<Item> MORTADELLA = ITEMS.register("mortadella", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.PORKCHOP)));
    public static final RegistryObject<Item> ALJAMIC_BEEF = ITEMS.register("aljamic_beef", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BEEF)));
    public static final RegistryObject<Item> COOKED_ALJAMIC_BEEF = ITEMS.register("cooked_aljamic_beef", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
    public static final RegistryObject<Item> ALJAMIC_PORKCHOP = ITEMS.register("aljamic_porkchop", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.PORKCHOP)));
    public static final RegistryObject<Item> COOKED_ALJAMIC_PORKCHOP = ITEMS.register("cooked_aljamic_porkchop", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_PORKCHOP)));
    public static final RegistryObject<Item> ALJAMIC_MUTTON = ITEMS.register("aljamic_mutton", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.MUTTON)));
    public static final RegistryObject<Item> COOKED_ALJAMIC_MUTTON = ITEMS.register("cooked_aljamic_mutton", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_MUTTON)));
    public static final RegistryObject<Item> ALJAMIC_CHICKEN = ITEMS.register("aljamic_chicken", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.CHICKEN)));
    public static final RegistryObject<Item> COOKED_ALJAMIC_CHICKEN = ITEMS.register("cooked_aljamic_chicken", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_CHICKEN)));
    public static final RegistryObject<Item> ROTTEN_ALJAMIC_FLESH = ITEMS.register("rotten_aljamic_flesh", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.ROTTEN_FLESH)));
    public static final RegistryObject<Item> ALJAMIC_EYE = ITEMS.register("aljamic_eye", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.SPIDER_EYE)));
    public static final RegistryObject<Item> RAW_SOPHIE = ITEMS.register("sophie", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.POTATO)));
    public static final RegistryObject<Item> RAW_MINCED_SOPHIE = ITEMS.register("raw_minced_sophie", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(1).saturation(0.3f).fastToEat().build())));
    public static final RegistryObject<Item> FRIED_SOPHIE = ITEMS.register("fried_sophie", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
    public static final RegistryObject<Item> MINCED_SOPHIE = ITEMS.register("minced_sophie", () -> new DescriptiveItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(3).saturation(5.0F).fastToEat().build())));
    public static final RegistryObject<Item> HOT_SOPHIE = ITEMS.register("hot_sophie", () -> new HotSophieItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.DRIED_KELP)));
    public static final RegistryObject<Item> RAW_LUCIA = ITEMS.register("lucia", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> RAW_MINCED_LUCIA = ITEMS.register("raw_minced_lucia", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(1).saturation(0.3f).fastToEat().build())));
    public static final RegistryObject<Item> COOKED_LUCIA = ITEMS.register("cooked_lucia", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
    public static final RegistryObject<Item> MINCED_LUCIA = ITEMS.register("minced_lucia", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(3).saturation(5.0F).fastToEat().build())));
    public static final RegistryObject<Item> RAW_FABRICIO = ITEMS.register("fabricio", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> RAW_MINCED_FABRICIO = ITEMS.register("raw_minced_fabricio", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(1).saturation(0.3f).fastToEat().build())));
    public static final RegistryObject<Item> TOASTED_FABRICIO = ITEMS.register("toasted_fabricio", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
    public static final RegistryObject<Item> MINCED_FABRICIO = ITEMS.register("minced_fabricio", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(new Food.Builder().hunger(3).saturation(5.0F).fastToEat().build())));
    public static final RegistryObject<Item> COLD_FABRICIO = ITEMS.register("cold_fabricio", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.DRIED_KELP)));
    public static final RegistryObject<Item> RAW_SOPHICIO_MIXTURE = ITEMS.register("raw_sophicio_mixture", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.PORKCHOP)));
    public static final RegistryObject<Item> SOPHICIO_MIXTURE = ITEMS.register("sophicio_mixture", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.RABBIT_STEW)));
    public static final RegistryObject<Item> PASTA = ITEMS.register("pasta", () -> new MealItem(5));
    public static final RegistryObject<Item> FRIED_SOPHIE_FRIED_EGG_MEAL = ITEMS.register("fried_sophie_fried_egg_meal", () -> new MealItem(6));
    public static final RegistryObject<Item> COOKED_LUCIA_FRIED_EGG_MEAL = ITEMS.register("cooked_lucia_fried_egg_meal", () -> new MealItem(5));
    public static final RegistryObject<Item> TOASTED_FABRICIO_FRIED_EGG_MEAL = ITEMS.register("toasted_fabricio_fried_egg_meal", () -> new MealItem(8));
    public static final RegistryObject<Item> HOT_SOPHIE_COLD_FABRICIO_MEAL = ITEMS.register("hot_sophie_cold_fabricio_meal", HotSophieAndColdFabricioMealItem::new);
    public static final RegistryObject<Item> AMARACAMEL_BATTER_BAG = ITEMS.register("amaracamel_batter_bag", () -> new BlockItem(BMBlocks.AMARACAMEL_BATTER_BAG.get(), new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> EMPTY_AMARACAMEL_BATTER_BAG = ITEMS.register("empty_amaracamel_batter_bag", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> AMARACAMEL_BATTER = ITEMS.register("amaracamel_batter", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.AMARACAMEL)));
    public static final RegistryObject<Item> FRIED_EGG_BAG = ITEMS.register("cooked_egg_bag", () -> new FriedEggBagItem(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> EMPTY_FRIED_EGG_BAG = ITEMS.register("empty_cooked_egg_bag", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> TURTLE_FRIED_EGG_BAG = ITEMS.register("turtle_fried_egg_bag", () -> new TurtleFriedEggBagItem(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> EMPTY_TURTLE_FRIED_EGG_BAG = ITEMS.register("empty_turtle_fried_egg_bag", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> ENDER_DRAGON_FRIED_EGG_BAG = ITEMS.register("ender_dragon_fried_egg_bag", () -> new EnderDragonFriedEggBagItem(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> EMPTY_ENDER_DRAGON_FRIED_EGG_BAG = ITEMS.register("empty_ender_dragon_fried_egg_bag", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> LAGUSTA_BAG = ITEMS.register("lagusta_bag", () -> new LagustaBagItem(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> EMPTY_LAGUSTA_BAG = ITEMS.register("empty_lagusta_bag", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> LAGUSTA = ITEMS.register("lagusta", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.LAGUSTA)));
    public static final RegistryObject<Item> BOOT_PACK = ITEMS.register("boot_pack", () -> new BlockItem(BMBlocks.BOOT_PACK.get(), new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> EMPTY_BOOT_PACK = ITEMS.register("empty_boot_pack", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> QUEEN_LUCY_BATTLE_PACK = ITEMS.register("queen_sophie_battle_pack", QueenLucyBattlePackItem::new);
    public static final RegistryObject<Item> FOOD_BAG = ITEMS.register("food_bag", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> FRIED_EGG = ITEMS.register("cooked_egg", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BAKED_POTATO)));
    public static final RegistryObject<Item> OMELET = ITEMS.register("omelet", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_CHICKEN)));
    public static final RegistryObject<Item> TURTLE_FRIED_EGG = ITEMS.register("turtle_fried_egg", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BAKED_POTATO)));
    public static final RegistryObject<Item> TURTLE_OMELET = ITEMS.register("turtle_omelet", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_CHICKEN)));
    public static final RegistryObject<Item> ENDER_DRAGON_FRIED_EGG = ITEMS.register("ender_dragon_fried_egg", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.BAKED_POTATO)));
    public static final RegistryObject<Item> ENDER_OMELET = ITEMS.register("ender_omelet", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_CHICKEN)));
    public static final RegistryObject<Item> HILLARY_CAKE = ITEMS.register("hillary_cake", () -> new BlockItem(BMBlocks.HILLARY_CAKE.get(), new Item.Properties().maxStackSize(1).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> MILKLLARY_CAKE = ITEMS.register("milkllary_cake", () -> new BlockItem(BMBlocks.MILKLLARY_CAKE.get(), new Item.Properties().maxStackSize(1).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> CHOCOLATE_NAKED_CAKE = ITEMS.register("chocolate_naked_cake", () -> new BlockItem(BMBlocks.CHOCOLATE_NAKED_CAKE.get(), new Item.Properties().maxStackSize(1).group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> PINE_JELLY = ITEMS.register("pine_jelly", () -> new DescriptiveItem(new Item.Properties().group(SophiesCursedFoods.TAB).food(BMFoods.PINE_JELLY)));
    public static final RegistryObject<Item> CHEESE_BREAD = ITEMS.register("cheese_bread", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
    public static final RegistryObject<Item> FOOD_BAG_ALT = ITEMS.register("food_bag_alt", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> CHEESE_BREAD_BAG = ITEMS.register("cheese_bread_bag", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
    public static final RegistryObject<Item> PATTY = ITEMS.register("patty", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.APPLE)));
    public static final RegistryObject<Item> NOTEBOOK = ITEMS.register("notebook", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB)));
    public static final RegistryObject<Item> FRIED_NOTEBOOK = ITEMS.register("fried_notebook", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
    public static final RegistryObject<Item> STUFFED_COOKIE_NOTEBOOK = ITEMS.register("stuffed_cookie_notebook", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
    public static final RegistryObject<Item> FRIED_STUFFED_COOKIE_NOTEBOOK = ITEMS.register("fried_stuffed_cookie_notebook", () -> new Item(new Item.Properties().group(SophiesCursedFoods.TAB).food(Foods.COOKED_BEEF)));
}
